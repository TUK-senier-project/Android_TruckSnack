Index: app/src/main/res/layout/activity_sign_up.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".SignUpActivity\"\r\n    android:orientation=\"vertical\"\r\n    android:layout_margin=\"16dp\">\r\n\r\n    <ScrollView\r\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\">\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/main_textInputLayout_ID\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n                <EditText\r\n                    android:id=\"@+id/Edit_ID\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"50dp\"\r\n                    android:inputType=\"text\"\r\n                    android:hint=\"아이디를 입력해주세요.\"\r\n                    android:layout_gravity=\"center\"/>\r\n\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/main_textInputLayout_PW\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n                <EditText\r\n                    android:id=\"@+id/Edit_PW\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"50dp\"\r\n                    android:inputType=\"textPassword\"\r\n                    android:hint=\"비밀번호를 입력해주세요.\"\r\n                    android:layout_gravity=\"center\"/>\r\n\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/main_textInputLayout_create_name\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n                <EditText\r\n                    android:id=\"@+id/create_name\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"50dp\"\r\n                    android:hint=\"이름을 입력해주세요.\"\r\n                    android:layout_gravity=\"center\"/>\r\n\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <com.google.android.material.textfield.TextInputLayout\r\n                android:id=\"@+id/main_textInputLayout_phone_number_create\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n                <EditText\r\n                    android:id=\"@+id/phone_number_create\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"50dp\"\r\n                    android:inputType=\"text\"\r\n                    android:hint=\"핸드폰번호를 입력해주세요.\"\r\n                    android:layout_gravity=\"center\"/>\r\n\r\n            </com.google.android.material.textfield.TextInputLayout>\r\n\r\n            <Button\r\n                android:id=\"@+id/button_location\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"위치 조회\"\r\n                android:layout_gravity=\"center_horizontal\"\r\n                android:layout_marginTop=\"16dp\"\r\n                />\r\n            <EditText\r\n                android:id=\"@+id/editText\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:inputType=\"text\"\r\n                android:digits=\"가-힣\" />\r\n\r\n            <fragment\r\n                android:id=\"@+id/map\"\r\n                android:name=\"com.google.android.gms.maps.SupportMapFragment\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"300dp\" />\r\n\r\n            <Button\r\n                android:id=\"@+id/sign_up_btn\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"center\"\r\n                android:text=\"회원가입\" />\r\n        </LinearLayout>\r\n\r\n\r\n    </ScrollView>\r\n\r\n\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_sign_up.xml b/app/src/main/res/layout/activity_sign_up.xml
--- a/app/src/main/res/layout/activity_sign_up.xml	(revision 225d742c0fbf6a64fb066cd6742ad190fb7a5e7d)
+++ b/app/src/main/res/layout/activity_sign_up.xml	(date 1679904492446)
@@ -14,6 +14,7 @@
         xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_width="match_parent"
         android:layout_height="match_parent">
+
         <LinearLayout
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
Index: app/src/main/java/com/example/icontest2/SignUpActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.icontest2\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.InputFilter\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.widget.EditText\r\nimport com.example.icontest2.databinding.ActivitySignUpBinding\r\nimport java.util.regex.Pattern\r\nimport android.Manifest\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.location.Geocoder\r\nimport android.widget.Button\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport java.util.*\r\n\r\n\r\nclass SignUpActivity : AppCompatActivity(), OnMapReadyCallback {\r\n    private lateinit var binding: ActivitySignUpBinding\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var buttonLocation: Button\r\n    private val REQUEST_LOCATION_PERMISSION = 1\r\n    private var TAG = \"SignUpActivity\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?){\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivitySignUpBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        // 아이디, 비밀번호, 비밀번호 확인, 이름, 휴대폰번호의 editText id\r\n        val signUpBtn = binding.signUpBtn\r\n        val signUptextIdLengthChecker = binding.mainTextInputLayoutID\r\n        val signUptextPwLengthChecker = binding.mainTextInputLayoutPW\r\n        val lengthCheck = binding.mainTextInputLayoutCreateName\r\n        val signUPEdit_ID = binding.EditID // 아이디 만들기\r\n        val signUPEdit_PW = binding.EditPW // 비밀번호 만들기\r\n        val signUpCreate_name = binding.createName // 이름 만들기\r\n        val signUpCreate_phone_number = binding.phoneNumberCreate // 폰번호 숫자만 11자제한\r\n        setEditTextInput(signUpCreate_phone_number, 11)\r\n\r\n        signUpBtn.setOnClickListener {\r\n            var intent = Intent(this, LoginActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        buttonLocation = findViewById(R.id.button_location) // 사용자 위치 조회 및 입력\r\n        buttonLocation.setOnClickListener {\r\n            requestLocationPermission()\r\n            showUserLocation()\r\n        }\r\n        val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n\r\n        val buttonShowLocation = findViewById<Button>(R.id.button_location)\r\n        buttonShowLocation.setOnClickListener {\r\n            if (ContextCompat.checkSelfPermission(this,\r\n                    Manifest.permission.ACCESS_FINE_LOCATION)\r\n                == PackageManager.PERMISSION_GRANTED) {\r\n                // 위치 권한이 허용된 경우\r\n                showUserLocation()\r\n            } else {\r\n                // 위치 권한이 허용되지 않은 경우\r\n                ActivityCompat.requestPermissions(this,\r\n                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                    REQUEST_LOCATION_PERMISSION)\r\n            }\r\n        }\r\n\r\n        // 아이디, 패스워드 초과 경고 메세지\r\n        fun textLengthChecker() {\r\n            signUptextIdLengthChecker.isCounterEnabled = true\r\n            signUptextPwLengthChecker.isCounterEnabled = true\r\n            lengthCheck.isCounterEnabled = true\r\n\r\n            signUptextIdLengthChecker.counterMaxLength = 15 // ID 최대 길이\r\n            signUptextPwLengthChecker.counterMaxLength = 20 // PW 최대 길이\r\n            lengthCheck.counterMaxLength = 10\r\n\r\n            signUptextIdLengthChecker.isErrorEnabled = true\r\n            signUptextPwLengthChecker.isErrorEnabled = true\r\n            lengthCheck.isErrorEnabled = true\r\n\r\n            signUPEdit_ID.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun afterTextChanged(p0: Editable?) {\r\n                    if (signUPEdit_ID.length() > 15) {\r\n                        signUptextIdLengthChecker.error = \"ID의 글자 수를 초과하였습니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                    if (signUPEdit_ID.length() < 5) {\r\n                        signUptextIdLengthChecker.error = \"ID는 최소 5자 이상입니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n            signUPEdit_PW.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun afterTextChanged(p0: Editable?) {\r\n                    if (signUPEdit_PW.length() > 20) {\r\n                        signUptextPwLengthChecker.error = \"PW의 글자 수를 초과하였습니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                    if (signUPEdit_PW.length() < 8) {\r\n                        signUptextPwLengthChecker.error = \"PW는 최소 8자 이상입니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                }\r\n            })\r\n            signUpCreate_name.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                    if (signUpCreate_name.length() > 10) {\r\n                        lengthCheck.error = \"이름의 글자 수를 초과 하였습니다.\"\r\n                    } else {\r\n                        lengthCheck.error = null\r\n                    }\r\n                }\r\n                override fun afterTextChanged(p0: Editable?) {\r\n                }\r\n            })\r\n        }\r\n\r\n        notKorean(signUPEdit_ID) // id 한글 예외처리\r\n        notKorean(signUPEdit_PW) // pw 한글 예외처리\r\n        onlyKorean(signUpCreate_name) // 이름 입력시 한글만\r\n        checkwhite(signUpCreate_name) // 이름 입력시 공백 확인\r\n        textLengthChecker() // 문자길이 체크\r\n\r\n    }\r\n\r\n    // 한글예외처리 함수\r\n    fun notKorean(editText: EditText){\r\n        Log.d(TAG, \" - checkNotKorean\")\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n            }\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n            }\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val text = s.toString()\r\n                if (text.matches(Regex(\"[ㄱ-ㅎ가-힣]+\"))) {\r\n                    editText.error = \"한글은 입력할 수 없습니다.\"\r\n                } else {\r\n                    editText.error = null\r\n                }\r\n            }\r\n        })\r\n    }\r\n    // 한글만 입력함수\r\n    fun onlyKorean(editText: EditText){\r\n        Log.d(TAG, \" - checkNotKorean\")\r\n        val pattern = Pattern.compile(\"[^ㄱ-ㅎ가-힣]*$\") // 한글을 제외한 문자열 패턴\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val text = s.toString()\r\n                val matcher = pattern.matcher(text)\r\n                if (matcher.matches()) {\r\n                    editText.error = \"한글을 제외한 문자열은 입력할 수 없습니다.\"\r\n                } else {\r\n                    editText.error = null\r\n                }\r\n            }\r\n        })\r\n    }\r\n    // 공백체크함수\r\n    fun checkwhite(editText: EditText){\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            override fun afterTextChanged(s: Editable?) {\r\n                // EditText의 문자열 가져오기\r\n                val text = s.toString()\r\n                Log.d(TAG, \"${text} - checkWhiteSpace\")\r\n                // 결과 출력\r\n                if (text.contains(\" \")) {\r\n                    Log.d(TAG, \"${text} - 공백있음\")\r\n                    editText.error = \"공백이 포함되어 있습니다.\"\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n    // 폰번호 입력시 11자제한, 숫자만 입력\r\n    fun setEditTextInput(editText: EditText, maxLength: Int) {\r\n        val inputFilter = arrayOf<InputFilter>(InputFilter { source, _, _, _, _, _ ->\r\n            if (source.toString().matches(Regex(\"[0-9]+\"))) {\r\n                null // 숫자일 경우, null 리턴\r\n            } else {\r\n                \"\" // 숫자가 아닐 경우, 빈 문자열(\"\") 리턴\r\n            }\r\n        })\r\n        editText.filters = inputFilter\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val input = s.toString()\r\n                if (input.length > maxLength) {\r\n                    editText.error = \"입력할 수 있는 숫자는 ${maxLength}자리 이하입니다.\"\r\n                } else {\r\n                    editText.error = null\r\n                }\r\n                val text = s.toString()\r\n                Log.d(TAG, \"${text} - checkWhiteSpace\")\r\n                // 결과 출력\r\n                if (text.contains(\" \")) {\r\n                    Log.d(TAG, \"${text} - 공백있음\")\r\n                    editText.error = \"공백이 포함되어 있습니다.\"\r\n                }\r\n\r\n\r\n            }\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n        })\r\n    }\r\n    // 사용자 위치 조회, 위치 입력\r\n    private fun showUserLocation() {\r\n        val editText = findViewById<EditText>(R.id.editText)\r\n        if (ContextCompat.checkSelfPermission(this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n            mMap.isMyLocationEnabled = true\r\n\r\n            // 사용자 위치 가져오기\r\n            val fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)\r\n            fusedLocationProviderClient.lastLocation.addOnSuccessListener { location ->\r\n                if (location != null) {\r\n                    val geocoder = Geocoder(this, Locale.KOREAN)\r\n                    val addresses = geocoder.getFromLocation(location.latitude, location.longitude, 1)\r\n                    if (addresses != null) {\r\n                        if (addresses.isNotEmpty()) {\r\n                            val address = addresses[0]\r\n                            val addressStr = address.getAddressLine(0)\r\n                            editText.setText(addressStr)\r\n                        }\r\n                    }\r\n\r\n\r\n                    val latLng = LatLng(location.latitude, location.longitude)\r\n                    mMap.addMarker(MarkerOptions().position(latLng).title(\"User Location\"))\r\n                    mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 15f))\r\n                }\r\n            }\r\n        }\r\n    }\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        mMap = googleMap\r\n        mMap.uiSettings.isZoomControlsEnabled = true\r\n    }\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == REQUEST_LOCATION_PERMISSION) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                showUserLocation()\r\n            }\r\n        }\r\n    }\r\n    private fun requestLocationPermission() {\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            showUserLocation()\r\n        } else {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                REQUEST_LOCATION_PERMISSION\r\n            )\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/icontest2/SignUpActivity.kt b/app/src/main/java/com/example/icontest2/SignUpActivity.kt
--- a/app/src/main/java/com/example/icontest2/SignUpActivity.kt	(revision 225d742c0fbf6a64fb066cd6742ad190fb7a5e7d)
+++ b/app/src/main/java/com/example/icontest2/SignUpActivity.kt	(date 1679908279834)
@@ -13,6 +13,7 @@
 import android.content.Intent
 import android.content.pm.PackageManager
 import android.location.Geocoder
+import android.view.MenuItem
 import android.widget.Button
 import androidx.core.app.ActivityCompat
 import androidx.core.content.ContextCompat
@@ -23,6 +24,7 @@
 import com.google.android.gms.maps.SupportMapFragment
 import com.google.android.gms.maps.model.LatLng
 import com.google.android.gms.maps.model.MarkerOptions
+import com.google.android.material.textfield.TextInputLayout
 import java.util.*
 
 
@@ -38,6 +40,7 @@
         binding = ActivitySignUpBinding.inflate(layoutInflater)
         setContentView(binding.root)
 
+
         // 아이디, 비밀번호, 비밀번호 확인, 이름, 휴대폰번호의 editText id
         val signUpBtn = binding.signUpBtn
         val signUptextIdLengthChecker = binding.mainTextInputLayoutID
@@ -78,116 +81,105 @@
         }
 
         // 아이디, 패스워드 초과 경고 메세지
-        fun textLengthChecker() {
-            signUptextIdLengthChecker.isCounterEnabled = true
-            signUptextPwLengthChecker.isCounterEnabled = true
-            lengthCheck.isCounterEnabled = true
-
-            signUptextIdLengthChecker.counterMaxLength = 15 // ID 최대 길이
-            signUptextPwLengthChecker.counterMaxLength = 20 // PW 최대 길이
-            lengthCheck.counterMaxLength = 10
-
-            signUptextIdLengthChecker.isErrorEnabled = true
-            signUptextPwLengthChecker.isErrorEnabled = true
-            lengthCheck.isErrorEnabled = true
-
-            signUPEdit_ID.addTextChangedListener(object : TextWatcher {
-                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                }
-                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                }
-                override fun afterTextChanged(p0: Editable?) {
-                    if (signUPEdit_ID.length() > 15) {
-                        signUptextIdLengthChecker.error = "ID의 글자 수를 초과하였습니다."
-                    } else {
-                        signUptextIdLengthChecker.error = null
-                    }
-                    if (signUPEdit_ID.length() < 5) {
-                        signUptextIdLengthChecker.error = "ID는 최소 5자 이상입니다."
-                    } else {
-                        signUptextIdLengthChecker.error = null
-                    }
-                }
-
-            })
+        signUPEdit_ID.addTextChangedListener(object : TextWatcher {
+            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
+            }
+            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
+            }
+            override fun afterTextChanged(p0: Editable?) {
+                val id = p0.toString()
+                if (id.contains(" ")) {
+                    signUptextIdLengthChecker.error = "공백을 포함할 수 없습니다."
+                } else if (id.length > 15) {
+                    signUptextIdLengthChecker.error = "ID의 글자 수를 초과하였습니다."
+                } else if (id.length < 5) {
+                    signUptextIdLengthChecker.error = "ID는 최소 5자 이상입니다."
+                } else {
+                    signUptextIdLengthChecker.error = null
+                }
+            }
+        })
 
-            signUPEdit_PW.addTextChangedListener(object : TextWatcher {
-                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                }
-                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                }
-                override fun afterTextChanged(p0: Editable?) {
-                    if (signUPEdit_PW.length() > 20) {
-                        signUptextPwLengthChecker.error = "PW의 글자 수를 초과하였습니다."
-                    } else {
-                        signUptextIdLengthChecker.error = null
-                    }
-                    if (signUPEdit_PW.length() < 8) {
-                        signUptextPwLengthChecker.error = "PW는 최소 8자 이상입니다."
-                    } else {
-                        signUptextIdLengthChecker.error = null
-                    }
-                }
-            })
-            signUpCreate_name.addTextChangedListener(object : TextWatcher {
-                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                }
-                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                    if (signUpCreate_name.length() > 10) {
-                        lengthCheck.error = "이름의 글자 수를 초과 하였습니다."
-                    } else {
-                        lengthCheck.error = null
-                    }
+        signUPEdit_PW.addTextChangedListener(object : TextWatcher {
+            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
+            }
+            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
+            }
+            override fun afterTextChanged(p0: Editable?) {
+                val pw = p0.toString()
+                if (pw.contains(" ")) {
+                    signUptextPwLengthChecker.error = "공백을 포함할 수 없습니다."
+                } else if (pw.length > 20) {
+                    signUptextPwLengthChecker.error = "PW의 글자 수를 초과하였습니다."
+                } else if (pw.length < 8) {
+                    signUptextPwLengthChecker.error = "PW는 최소 8자 이상입니다."
+                } else {
+                    signUptextPwLengthChecker.error = null
+                }
+            }
+        })
+
+        signUpCreate_name.addTextChangedListener(object : TextWatcher {
+            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
+            }
+            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
+            }
+            override fun afterTextChanged(p0: Editable?) {
+                val name = p0.toString()
+                if (name.contains(" ")) {
+                    lengthCheck.error = "공백을 포함할 수 없습니다."
+                } else if (name.length > 10) {
+                    lengthCheck.error = "이름의 글자 수를 초과 하였습니다."
+                } else {
+                    lengthCheck.error = null
                 }
-                override fun afterTextChanged(p0: Editable?) {
-                }
-            })
-        }
-
+            }
+        })
         notKorean(signUPEdit_ID) // id 한글 예외처리
         notKorean(signUPEdit_PW) // pw 한글 예외처리
         onlyKorean(signUpCreate_name) // 이름 입력시 한글만
         checkwhite(signUpCreate_name) // 이름 입력시 공백 확인
-        textLengthChecker() // 문자길이 체크
-
+        //textLengthChecker() // 문자길이 체크
     }
 
-    // 한글예외처리 함수
-    fun notKorean(editText: EditText){
+    // 한글 입력 시 오류
+    fun notKorean(editText: EditText) {
         Log.d(TAG, " - checkNotKorean")
         editText.addTextChangedListener(object : TextWatcher {
-            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
-            }
-            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
-            }
+            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
+
+            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
+
             override fun afterTextChanged(s: Editable?) {
                 val text = s.toString()
-                if (text.matches(Regex("[ㄱ-ㅎ가-힣]+"))) {
-                    editText.error = "한글은 입력할 수 없습니다."
+                if (text.matches(Regex("[^a-zA-Z0-9 ]+")) || text.matches(Regex(".*[ㄱ-ㅎㅏ-ㅣ가-힣]+.*"))) {
+                    editText.error = "영어와 숫자만 입력 가능합니다."
                 } else {
                     editText.error = null
                 }
             }
         })
     }
+
     // 한글만 입력함수
-    fun onlyKorean(editText: EditText){
-        Log.d(TAG, " - checkNotKorean")
-        val pattern = Pattern.compile("[^ㄱ-ㅎ가-힣]*$") // 한글을 제외한 문자열 패턴
+    fun onlyKorean(editText: EditText) {
+        Log.d(TAG, " - checkOnlyKorean")
         editText.addTextChangedListener(object : TextWatcher {
             override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
+
             override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
+
             override fun afterTextChanged(s: Editable?) {
                 val text = s.toString()
-                val matcher = pattern.matcher(text)
-                if (matcher.matches()) {
-                    editText.error = "한글을 제외한 문자열은 입력할 수 없습니다."
+                if (!text.matches(Regex("[ㄱ-ㅎㅏ-ㅣ가-힣 ]*"))) {
+                    editText.error = "한글만 입력 가능합니다."
                 } else {
                     editText.error = null
                 }
             }
         })
     }
+
     // 공백체크함수
     fun checkwhite(editText: EditText){
         editText.addTextChangedListener(object : TextWatcher {
@@ -220,7 +212,9 @@
             override fun afterTextChanged(s: Editable?) {
                 val input = s.toString()
                 if (input.length > maxLength) {
-                    editText.error = "입력할 수 있는 숫자는 ${maxLength}자리 이하입니다."
+                    editText.error = "입력할 수 있는 숫자는 ${maxLength}자리 미만입니다."
+                } else if (input.length < 11) {
+                    editText.error = "입력할 수 있는 숫자는 11자리 이상입니다."
                 } else {
                     editText.error = null
                 }
@@ -231,13 +225,12 @@
                     Log.d(TAG, "${text} - 공백있음")
                     editText.error = "공백이 포함되어 있습니다."
                 }
-
-
             }
             override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
             override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
         })
     }
+
     // 사용자 위치 조회, 위치 입력
     private fun showUserLocation() {
         val editText = findViewById<EditText>(R.id.editText)
@@ -298,5 +291,15 @@
             )
         }
     }
+    // 뒤로가기 버튼 클릭 이벤트 처리(사용시 onCreate 밖에 복사)
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        return when (item.itemId) {
+            android.R.id.home -> {
+                onBackPressed()
+                true
+            }
+            else -> super.onOptionsItemSelected(item)
+        }
+    }
 
 }
\ No newline at end of file
