Index: app/src/main/java/com/example/icontest2/SignUpActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.icontest2\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.InputFilter\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.widget.EditText\r\nimport com.example.icontest2.databinding.ActivitySignUpBinding\r\n\r\nclass SignUpActivity : AppCompatActivity() {\r\n    private lateinit var binding : ActivitySignUpBinding\r\n    private var TAG = \"SignUpActivity\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivitySignUpBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        val returnIntent = Intent(this, LoginActivity::class.java)\r\n        val locationRegisterIntent = Intent(this, LocationRegisterActivity::class.java)\r\n\r\n        // 아이디, 비밀번호, 비밀번호 확인, 이름, 휴대폰번호의 editText id\r\n        val signUpIdEdit = binding.signUpIdEdit\r\n        val signUpPasswdEdit = binding.signUpPasswdEdit\r\n        val signUpCheckPasswdEdit = binding.signUpCheckPasswdEdit\r\n        val signUpNameEdit = binding.signUpNameEdit\r\n        val signUpPhoneEdit = binding.signUpPhoneEdit\r\n\r\n        val textWatcher = object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n\r\n            // 사용자의 입력이 끝난 후 처리\r\n            override fun afterTextChanged(s: Editable?) {\r\n                Log.d(TAG, \"${s}\")\r\n\r\n                // 아이디\r\n                if (s == signUpIdEdit.editableText){\r\n                    Log.d(TAG, \"in - id - length\")\r\n                    val minLength = 5\r\n                    val maxLength = 15\r\n                    checkWhiteSpace(s, signUpIdEdit) // 공백 문자 확인\r\n                    checkSpecialCharacters(s, signUpIdEdit) // 특수 문자 확인\r\n                    checkLength(s, signUpIdEdit, maxLength, minLength) // 문자열 길이 확인\r\n\r\n                }\r\n                // 비밀번호\r\n                if (s == signUpPasswdEdit.editableText){\r\n                    Log.d(TAG, \"in - pw - length\")\r\n                    val minLength = 8\r\n                    val maxLength = 20\r\n                    checkWhiteSpace(s, signUpPasswdEdit) // 공백 문자 확인\r\n                    checkSpecialCharacters(s, signUpPasswdEdit) // 특수 문자 확인\r\n                    checkAlphaNumber(signUpPasswdEdit) // 영문 + 숫자 확인\r\n                    checkLength(s, signUpPasswdEdit, maxLength, minLength) // 문자열 길이 확인\r\n\r\n                }\r\n                // 비밀번호 체크\r\n                if (s == signUpCheckPasswdEdit.editableText){\r\n                    Log.d(TAG, \"in - pwcheck - length\")\r\n                    if (signUpPasswdEdit.text.toString() != signUpCheckPasswdEdit.text.toString()){\r\n                        signUpCheckPasswdEdit.error = \"비밀번호가 일치하지 않습니다.\"\r\n                    } else {\r\n                        signUpCheckPasswdEdit.error = null\r\n                    }\r\n\r\n                }\r\n                // 이름\r\n                if (s == signUpNameEdit.editableText){\r\n                    Log.d(TAG, \"in - name - length\")\r\n                    val minLength = 1\r\n                    val maxLength = 10\r\n                    checkWhiteSpace(s, signUpNameEdit) // 공백 문자 확인\r\n                    checkSpecialCharacters(s, signUpNameEdit) // 특수 문자 확인\r\n                    checkKorean(signUpNameEdit) // 한글 확인\r\n                    checkLength(s, signUpNameEdit, maxLength, minLength) // 문자열 길이 확인\r\n                }\r\n                // 휴대폰번호\r\n                if (s == signUpPhoneEdit.editableText){\r\n                    Log.d(TAG, \"in - phone - length\")\r\n                    checkWhiteSpace(s, signUpPhoneEdit) // 공백 문자 확인\r\n                    checkSpecialCharacters(s, signUpPhoneEdit) // 특수 문자 확인\r\n                    checkPhoneNumber(signUpPhoneEdit) // 숫자 및 11자 확인\r\n                }\r\n            }\r\n        }\r\n\r\n        // 각 항목별 공백, 특수 문자 처리\r\n        signUpIdEdit.addTextChangedListener(textWatcher)\r\n        signUpPasswdEdit.addTextChangedListener(textWatcher)\r\n        signUpCheckPasswdEdit.addTextChangedListener(textWatcher)\r\n        signUpNameEdit.addTextChangedListener(textWatcher)\r\n        signUpPhoneEdit.addTextChangedListener(textWatcher)\r\n\r\n\r\n\r\n\r\n\r\n        binding.signUpBtn.setOnClickListener {\r\n\r\n            returnIntent.putExtra(\"name\", binding.signUpNameEdit.text.toString())\r\n            startActivity(returnIntent)\r\n            finish()\r\n        }\r\n\r\n        binding.signUpLocationBtn.setOnClickListener {\r\n            startActivity(locationRegisterIntent)\r\n        }\r\n\r\n\r\n    }\r\n    // 공백 문자 확인 함수\r\n    fun checkWhiteSpace(editable: Editable?, editText: EditText){\r\n        // EditText의 문자열 가져오기\r\n        val text = editable.toString()\r\n        Log.d(TAG, \"${text} - checkWhiteSpace\")\r\n        // 결과 출력\r\n        if(text.contains(\" \")){\r\n            Log.d(TAG, \"${text} - 공백있음\")\r\n            editText.error = \"공백이 포함되어 있습니다.\"\r\n        }\r\n    }\r\n\r\n    // 특수 문자 확인 함수\r\n    fun checkSpecialCharacters(editable: Editable?, editText: EditText){\r\n        // EditText의 문자열 가져오기\r\n        val text = editable.toString()\r\n        Log.d(TAG, \"${text} - checkSpecialCharacters\")\r\n\r\n        // 검사할 특수 문자 지정\r\n        val specialCharacters = \"!@#$%^&*()_-+=|\\\\{}[]:;\\\"'<>,.?/~`\"\r\n\r\n        // 결과 출력\r\n        if (text.matches(\".*[!@#\\$%^&*(),.?\\\":{}|<>\\\\[\\\\]~-].*\".toRegex())) {\r\n            editText.error = \"특수문자는 입력할 수 없습니다.\"\r\n        }\r\n\r\n    }\r\n\r\n    // 문자 길이 확인 함수\r\n    fun checkLength(editable: Editable?, editText: EditText ,maxLength: Int, minLength: Int){\r\n        // EditText의 문자열 가져오기\r\n        val text = editable.toString()\r\n        Log.d(TAG, \"${text} - checkLength\")\r\n\r\n        val length = text.length\r\n\r\n        if (length < minLength) {\r\n            editText.error = \"최소 ${minLength}자 이상 입력하세요\"\r\n        } else if (length > maxLength) {\r\n            editText.error = \"최대 ${maxLength}자까지 입력 가능합니다\"\r\n        }\r\n\r\n    }\r\n\r\n    // 영문 + 숫자 확인 함수\r\n    fun checkAlphaNumber(editText: EditText){\r\n        Log.d(TAG, \" - checkAlphaNumber\")\r\n\r\n        val alphaNumbericRegex = Regex(\"[a-zA-Z0-9]+\")\r\n        val inputFilter = InputFilter { source, start, end, dest, dstart, dend ->\r\n            val input = dest.subSequence(0, dstart).toString() + source.subSequence(start, end) + dest.subSequence(dend, dest.length).toString()\r\n            return@InputFilter if (input.matches(alphaNumbericRegex)) null else \"\"\r\n        }\r\n        editText.filters = arrayOf(inputFilter)\r\n\r\n    }\r\n\r\n    // 한국어 확인 함수\r\n    fun checkKorean(editText: EditText) {\r\n        Log.d(TAG, \" - checkKorean\")\r\n\r\n        val inputFilter = InputFilter { source, _, _, _, _, _ ->\r\n            val regex = Regex(\"[ㄱ-ㅎ가-힣]+\")\r\n            if (source.toString().matches(regex)) {\r\n                source\r\n            } else {\r\n                \"\"\r\n            }\r\n        }\r\n        editText.filters = arrayOf(inputFilter)\r\n    }\r\n\r\n    // 숫자 + 11글자 확인 함수\r\n    fun checkPhoneNumber(editText: EditText): Boolean {\r\n        Log.d(TAG, \" - checkPhoneNumber\")\r\n\r\n        val regex = Regex(\"[0-9]+\")\r\n        val isNumeric = editText.text.toString().matches(regex)\r\n        val isElevenDigits = editText.text.toString().length == 11\r\n        // 숫자로만 이루어졌는지 확인\r\n        if (!isNumeric){\r\n            editText.error = \"숫자만 입력해주십시오.\"\r\n        }\r\n        // 11글자인지 확인\r\n        if (!isElevenDigits){\r\n            editText.error = \"11자리를 입력해주십시오.\"\r\n        }\r\n        return isNumeric && isElevenDigits\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/icontest2/SignUpActivity.kt b/app/src/main/java/com/example/icontest2/SignUpActivity.kt
--- a/app/src/main/java/com/example/icontest2/SignUpActivity.kt	
+++ b/app/src/main/java/com/example/icontest2/SignUpActivity.kt	
@@ -98,8 +98,6 @@
 
 
 
-
-
         binding.signUpBtn.setOnClickListener {
 
             returnIntent.putExtra("name", binding.signUpNameEdit.text.toString())
@@ -154,7 +152,6 @@
         } else if (length > maxLength) {
             editText.error = "최대 ${maxLength}자까지 입력 가능합니다"
         }
-
     }
 
     // 영문 + 숫자 확인 함수
@@ -202,4 +199,7 @@
         }
         return isNumeric && isElevenDigits
     }
+    fun asd(editText: EditText){
+
+    }
 }
\ No newline at end of file
