Index: app/src/main/java/com/example/icontest2/SellerRegisterActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.icontest2\r\n\r\nimport android.Manifest\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.location.Geocoder\r\nimport android.location.Location\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.AdapterView\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.example.icontest2.databinding.ActivitySellerRegisterBinding\r\nimport com.google.android.gms.location.FusedLocationProviderClient\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.MapView\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.Marker\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport java.util.*\r\n\r\nclass SellerRegisterActivity : AppCompatActivity(), OnMapReadyCallback {\r\n    private lateinit var binding : ActivitySellerRegisterBinding\r\n    private lateinit var mapView: MapView\r\n    private lateinit var googleMap: GoogleMap\r\n    private lateinit var marker: Marker\r\n    private lateinit var geocoder: Geocoder\r\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\r\n    private lateinit var sellerRegisterLocationEdt: EditText\r\n    private var category: Int = 0\r\n    private var time: Int = 0\r\n    private var minute: Int = 0\r\n\r\n    companion object {\r\n        private const val REQUEST_LOCATION_PERMISSION = 1\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivitySellerRegisterBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        var idCheck = false\r\n        var pwCheck = false\r\n        var pwCheckCheck = false\r\n        var nameCheck = false\r\n        var contentCheck = false\r\n        var phoneCheck = false\r\n        var locationCheck = false\r\n\r\n        // EditText\r\n        val sellerRegisterIdEdt = binding.sellerRegisterIdEdt // 아이디\r\n        val sellerRegisterPasswordEdt = binding.sellerRegisterPasswordEdt // 비밀번호\r\n        val sellerRegisterPasswordCheckEdt = binding.sellerRegisterPasswordCheckEdt //비밀번호 확인\r\n        val sellerRegisterBusinessNameEdt = binding.sellerRegisterBusinessNameEdt // 사업명\r\n        val sellerRegisterContentEdt = binding.sellerRegisterContentEdt // 소개글\r\n        val sellerRegisterCategorySpinner = binding.sellerRegisterCategorySpinner // 카테고리 스피너\r\n        val sellerRegisterPhoneNumberEdt = binding.sellerRegisterPhoneNumberEdt // 휴대폰 번호\r\n        sellerRegisterLocationEdt = binding.sellerRegisterLocationEdt // 주소\r\n\r\n        var sellerRegisterLocationBtn = binding.sellerRegisterLocationBtn // 주소 버튼\r\n        var sellerRegisterIdCheckTv = binding.sellerRegisterIdCheckTv // 아이디 중복확인 TextView\r\n        var sellerRegisterIdCheckBtn = binding.sellerRegisterIdCheckBtn // 아이디 중복확인 TextView\r\n        val registerBtn = binding.registerBtn\r\n\r\n        // Spinner 연결\r\n        setUpCategorySpinner()\r\n        setUpTimeSpinner()\r\n        setUpMinuteSpinner()\r\n        spinnerHandler()\r\n\r\n        // ToolBar 설정, 제목, 버튼 활성화, 아이콘 클릭 가능 설정\r\n        setSupportActionBar(binding.sellerRegisterToolbar) // 생성시 ()안에 id 변경.\r\n        supportActionBar?.title = \"\"\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        supportActionBar?.setDisplayShowHomeEnabled(true)\r\n\r\n        mapView = binding.mapView\r\n        mapView.onCreate(savedInstanceState)\r\n        mapView.getMapAsync(this)\r\n\r\n        geocoder = Geocoder(this)\r\n\r\n        // FusedLocationProviderClient 초기화\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\r\n\r\n        val textWatcher = object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            // 사용자의 입력이 끝난 후 처리\r\n            override fun afterTextChanged(s: Editable?) {\r\n                Log.d(TAG, \"${s}\")\r\n                // 아이디\r\n                if (s == sellerRegisterIdEdt.editableText) {\r\n                    Log.d(TAG, \"in - id\")\r\n                    val minLength = 5\r\n                    val maxLength = 15\r\n\r\n                    idCheck = checkLength(s, sellerRegisterIdEdt, maxLength, minLength) &&\r\n                            checkWhiteSpace(s, sellerRegisterIdEdt) &&\r\n                            checkSpecialCharacters(s, sellerRegisterIdEdt) &&\r\n                            checkAlphaNumber(sellerRegisterIdEdt)\r\n                }\r\n                // 비밀번호\r\n                if (s == sellerRegisterPasswordEdt.editableText) {\r\n                    Log.d(TAG, \"in - pw\")\r\n                    val minLength = 8\r\n                    val maxLength = 20\r\n\r\n                    pwCheck = checkLength(s, sellerRegisterPasswordEdt, maxLength, minLength) &&\r\n                            checkWhiteSpace(s, sellerRegisterPasswordEdt) &&\r\n                            checkSpecialCharacters(s, sellerRegisterPasswordEdt) &&\r\n                            checkAlphaNumber(sellerRegisterPasswordEdt) &&\r\n                            certainAlphaNumber(sellerRegisterPasswordEdt)\r\n                }\r\n                // 비밀번호 체크\r\n                if (s == sellerRegisterPasswordCheckEdt.editableText) {\r\n                    Log.d(TAG, \"in - pwcheck\")\r\n                    if (sellerRegisterPasswordEdt.text.toString() != sellerRegisterPasswordCheckEdt.text.toString()) {\r\n                        sellerRegisterPasswordCheckEdt.error = \"비밀번호가 일치하지 않습니다.\"\r\n                        pwCheckCheck = false\r\n                    } else {\r\n                        sellerRegisterPasswordCheckEdt.error = null\r\n                        pwCheckCheck = true\r\n                    }\r\n                }\r\n                // 사업명\r\n                if (s == sellerRegisterBusinessNameEdt.editableText) {\r\n                    Log.d(TAG, \"in - name\")\r\n                    val minLength = 1\r\n                    val maxLength = 10\r\n\r\n                    nameCheck = checkLength(s, sellerRegisterBusinessNameEdt, maxLength, minLength) &&\r\n                            checkWhiteSpace(s, sellerRegisterBusinessNameEdt) &&\r\n                            checkSpecialCharacters(s, sellerRegisterBusinessNameEdt) &&\r\n                            checkKorean(sellerRegisterBusinessNameEdt)\r\n                }\r\n                // 소개글\r\n                if (s == sellerRegisterContentEdt.editableText) {\r\n                    Log.d(TAG, \"in - content\")\r\n                    val minLength = 1\r\n                    val maxLength = 50\r\n                    contentCheck = checkLength(s, sellerRegisterContentEdt, maxLength, minLength)\r\n                }\r\n                // 휴대폰번호\r\n                if (s == sellerRegisterPhoneNumberEdt.editableText) {\r\n                    Log.d(TAG, \"in - phone\")\r\n\r\n                    phoneCheck = checkPhoneNumber(sellerRegisterPhoneNumberEdt) &&\r\n                            checkWhiteSpace(s, sellerRegisterPhoneNumberEdt) &&\r\n                            checkSpecialCharacters(s, sellerRegisterPhoneNumberEdt)\r\n                }\r\n                // 주소\r\n                if (s == sellerRegisterLocationEdt.editableText){\r\n                    Log.d(TAG, \"in - location\")\r\n                    locationCheck = checkKoreanNumber(sellerRegisterLocationEdt)\r\n                }\r\n            }\r\n        }\r\n\r\n        // 회원가입폼 예외처리\r\n        sellerRegisterIdEdt.addTextChangedListener(textWatcher)\r\n        sellerRegisterPasswordEdt.addTextChangedListener(textWatcher)\r\n        sellerRegisterPasswordCheckEdt.addTextChangedListener(textWatcher)\r\n        sellerRegisterBusinessNameEdt.addTextChangedListener(textWatcher)\r\n        sellerRegisterContentEdt.addTextChangedListener(textWatcher)\r\n        //sellerRegisterCategoryEdt.addTextChangedListener(textWatcher)\r\n        sellerRegisterPhoneNumberEdt.addTextChangedListener(textWatcher)\r\n        sellerRegisterLocationEdt.addTextChangedListener(textWatcher)\r\n\r\n\r\n        /*\r\n        // 아이디 중복확인 버튼 클릭 시\r\n        sellerRegisterIdCheckBtn.setOnClickListener {\r\n            // sellerRegisterIdCheckTv Visible하게 만들어주기\r\n            // 중복확인 통신 후, 성공 시 성공글귀 보여주고, 실패 시 실패글귀 보여주기.(각각 색상에 맞게 설정해줘야함.)\r\n\r\n        }\r\n        */\r\n\r\n        // 현 위치등록 버튼 클릭 시\r\n        sellerRegisterLocationBtn.setOnClickListener {\r\n            // 현재 위치 정보 조회\r\n            if (ContextCompat.checkSelfPermission(\r\n                    this,\r\n                    android.Manifest.permission.ACCESS_FINE_LOCATION\r\n                ) == PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                fusedLocationClient.lastLocation.addOnSuccessListener { location ->\r\n                    if (location != null) {\r\n                        val geocoder = Geocoder(this, Locale.getDefault())\r\n                        val addresses = geocoder.getFromLocation(location.latitude, location.longitude, 1)\r\n                        val address = addresses?.get(0)\r\n                        if (address != null) {\r\n                            sellerRegisterLocationEdt.setText(address.getAddressLine(0))\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // 권한이 없는 경우 권한 요청\r\n                ActivityCompat.requestPermissions(\r\n                    this,\r\n                    arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION),\r\n                    REQUEST_LOCATION_PERMISSION\r\n                )\r\n            }\r\n        }\r\n        // 회원가입 버튼 클릭 시\r\n        registerBtn.setOnClickListener {\r\n            if (idCheck && pwCheck && pwCheckCheck && nameCheck && contentCheck && phoneCheck && locationCheck){\r\n\r\n                val id = sellerRegisterIdEdt.text.toString()\r\n                val pw = sellerRegisterPasswordEdt.text.toString()\r\n                val name = sellerRegisterBusinessNameEdt.text.toString()\r\n                val content = sellerRegisterContentEdt.text.toString()\r\n                val phoneNumber = sellerRegisterPhoneNumberEdt.text.toString()\r\n                val location = sellerRegisterLocationEdt.text.toString()\r\n                val deadline = (time.toString() + minute.toString()).toInt()\r\n                Log.d(TAG, \"$deadline\")\r\n                val seller = SellerDTO(id, pw, name, content, category, deadline, phoneNumber, location)\r\n                Log.d(TAG, \"$seller\")\r\n                Log.d(TAG, \"${id::class.java}\")\r\n                Log.d(TAG, \"${pw::class.java}\")\r\n                Log.d(TAG, \"${name::class.java}\")\r\n                Log.d(TAG, \"${content::class.java}\")\r\n                Log.d(TAG, \"${category::class.java}\")\r\n                Log.d(TAG, \"${deadline::class.java}\")\r\n                Log.d(TAG, \"${phoneNumber::class.java}\")\r\n                Log.d(TAG, \"${location::class.java}\")\r\n\r\n                val retrofit = Retrofit.Builder()\r\n                    .baseUrl(\"http://13.209.9.240:8080\")\r\n                    .addConverterFactory(GsonConverterFactory.create())\r\n                    .build()\r\n\r\n                val sellerAPI = retrofit.create(SellerAPI::class.java)\r\n\r\n                GlobalScope.launch(Dispatchers.IO) {\r\n                    try {\r\n                        val response = sellerAPI.registerSeller(seller)\r\n                        Log.d(TAG, \"통신전\")\r\n                        if (response.isSuccessful) {\r\n                            // 요청 성공\r\n                            Log.d(TAG, \"성공\")\r\n                            Log.d(TAG, \"${response.body()}\")\r\n                            Log.d(TAG, \"$response\")\r\n                            //move()\r\n                        } else {\r\n                            // 요청 실패\r\n                            Log.d(TAG, \"실패\")\r\n                            Log.d(TAG, \"${response.errorBody()}\")\r\n                            Log.d(TAG, \"$response\")\r\n                            //Toast.makeText(applicationContext, \"회원가입에 실패하셨습니다.\", Toast.LENGTH_SHORT).show()\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        Log.d(TAG, \"예외\")\r\n                        Log.d(TAG, \"$e\")\r\n                    }\r\n                }\r\n\r\n                /*\r\n                call.enqueue(object : Callback<Void> {\r\n                    override fun onResponse(call: Call<Void>, response: Response<Void>) {\r\n                        if (response.isSuccessful) {\r\n                            // 회원가입 성공\r\n                            Log.d(TAG, \"${response.body()}\")\r\n                            Toast.makeText(applicationContext, \"회원가입을 축하드립니다.\", Toast.LENGTH_SHORT).show()\r\n                            val intent = Intent(applicationContext, LoginActivity::class.java)\r\n                            startActivity(intent)\r\n                        } else {\r\n                            // 회원가입 실패\r\n                            Log.d(TAG, \"${response.errorBody()}\")\r\n                            Toast.makeText(applicationContext, \"회원가입에 실패하셨습니다.\", Toast.LENGTH_SHORT).show()\r\n                        }\r\n                    }\r\n                    override fun onFailure(call: Call<Void>, t: Throwable) {\r\n                        // 통신 실패 처리\r\n                        Log.d(TAG, \"$t\")\r\n                    }\r\n                })\r\n                */\r\n            } else{\r\n                Toast.makeText(this, \"정보를 모두 입력해 주세요.\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n    // 뒤로가기 버튼 클릭 이벤트 처리(사용시 onCreate 밖에 복사)\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            android.R.id.home -> {\r\n                onBackPressed()\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n\r\n    override fun onMapReady(p0: GoogleMap) {\r\n        googleMap = p0\r\n\r\n        // 서울 시청을 초기 위치로 설정\r\n        val seoulCityHall = LatLng(37.5662952, 126.9779451)\r\n        // googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(seoulCityHall, 15f))\r\n        // 마커 추가\r\n        googleMap.addMarker(\r\n            MarkerOptions()\r\n                .position(seoulCityHall)\r\n                .draggable(true)\r\n        )\r\n        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(seoulCityHall, 15f))\r\n\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\r\n        if (ActivityCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.ACCESS_COARSE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            return\r\n        }\r\n        fusedLocationClient.lastLocation\r\n            .addOnSuccessListener { location: Location? ->\r\n                // 위치정보 조회 성공시 실행될 코드\r\n                if (location != null) {\r\n                    val userLatLng = LatLng(location.latitude, location.longitude)\r\n                    googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(userLatLng, 15f))\r\n                }\r\n            }\r\n            .addOnFailureListener { exception: Exception ->\r\n                // 위치정보 조회 실패시 실행될 코드\r\n                Log.e(TAG, \"Error getting location\", exception)\r\n            }\r\n\r\n\r\n\r\n        // 마커 드래그 이벤트 처리\r\n        googleMap.setOnMarkerDragListener(object : GoogleMap.OnMarkerDragListener {\r\n            override fun onMarkerDragStart(marker: Marker) {}\r\n\r\n            override fun onMarkerDrag(marker: Marker) {}\r\n\r\n            override fun onMarkerDragEnd(marker: Marker) {\r\n                val position = marker.position\r\n                val addressList = geocoder.getFromLocation(position.latitude, position.longitude, 1)\r\n                if (addressList != null) {\r\n                    if (addressList.isNotEmpty()) {\r\n                        val address = addressList[0].getAddressLine(0)\r\n                        // 주소 출력\r\n                        Log.d(\"Address\", address)\r\n                        sellerRegisterLocationEdt.setText(address)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        googleMap.setOnCameraIdleListener {\r\n            // 지도 중앙 위치 가져오기\r\n            val center = googleMap.cameraPosition.target\r\n\r\n            // 마커 위치 설정\r\n            val markerOptions = MarkerOptions().position(center)\r\n            googleMap.clear()\r\n            googleMap.addMarker(markerOptions)\r\n\r\n            // 지오코딩으로 주소 찾기\r\n            val geocoder = Geocoder(this)\r\n            val addressList = geocoder.getFromLocation(center.latitude, center.longitude, 1)\r\n            if (addressList != null) {\r\n                if (addressList.isNotEmpty()) {\r\n                    val address = addressList[0]\r\n                    Log.d(\"MainActivity\", \"주소: ${address.getAddressLine(0)}\")\r\n                    sellerRegisterLocationEdt.setText(\"${address.getAddressLine(0)}\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    override fun onResume() {\r\n        super.onResume()\r\n        mapView.onResume()\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        mapView.onPause()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        mapView.onDestroy()\r\n    }\r\n\r\n    override fun onLowMemory() {\r\n        super.onLowMemory()\r\n        mapView.onLowMemory()\r\n    }\r\n    fun move(){\r\n        Toast.makeText(this, \"회원가입을 축하드립니다.\", Toast.LENGTH_SHORT).show()\r\n        val intent = Intent(this, LoginActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n    // 공백 문자 확인 함수\r\n    fun checkWhiteSpace(editable: Editable?, editText: EditText): Boolean {\r\n        // EditText의 문자열 가져오기\r\n        val text = editable.toString()\r\n        Log.d(TAG, \"${text} - checkWhiteSpace\")\r\n        // 결과 출력\r\n        return if (text.contains(\" \")) {\r\n            Log.d(TAG, \"${text} - 공백있음\")\r\n            editText.error = \"공백이 포함되어 있습니다.\"\r\n            false\r\n        } else true\r\n    }\r\n\r\n    // 특수 문자 확인 함수\r\n    fun checkSpecialCharacters(editable: Editable?, editText: EditText): Boolean {\r\n        // EditText의 문자열 가져오기\r\n        val text = editable.toString()\r\n        Log.d(TAG, \"${text} - checkSpecialCharacters\")\r\n\r\n        // 결과 출력\r\n        return if (text.matches(\".*[!@#\\$%^&*(),.?\\\":{}|<>\\\\[\\\\]~-].*\".toRegex())) {\r\n            editText.error = \"특수문자는 입력할 수 없습니다.\"\r\n            false\r\n        } else true\r\n\r\n    }\r\n\r\n    // 문자 길이 확인 함수\r\n    fun checkLength(editable: Editable?, editText: EditText, maxLength: Int, minLength: Int): Boolean {\r\n        // EditText의 문자열 가져오기\r\n        val text = editable.toString()\r\n        Log.d(TAG, \"${text} - checkLength\")\r\n\r\n        val length = text.length\r\n\r\n        return if (length < minLength) {\r\n            editText.error = \"최소 ${minLength}자 이상 입력하세요\"\r\n            false\r\n        } else if (length > maxLength) {\r\n            editText.error = \"최대 ${maxLength}자까지 입력 가능합니다\"\r\n            false\r\n        } else true\r\n    }\r\n    // 영+숫 확인 함수\r\n    fun checkAlphaNumber(editText: EditText): Boolean {\r\n        Log.d(TAG, \" - checkAlphaNumber\")\r\n        val text = editText.text.toString()\r\n        return if(text.contains(Regex(\"[ㄱ-ㅎㅏ-ㅣ가-힣]+\"))){\r\n            editText.error = \"영문 또는 숫자만 입력 가능합니다.\"\r\n            false\r\n        } else true\r\n    }\r\n\r\n    // 영+숫 조합인지 확인\r\n    fun certainAlphaNumber(editText: EditText): Boolean {\r\n        Log.d(TAG, \" - certainAlphaNumber\")\r\n        val text = editText.text.toString()\r\n        return if(text.contains(Regex(\"[0-9]+\")) && text.contains(Regex(\"[a-zA-Z]+\"))){\r\n            true\r\n        } else {\r\n            editText.error = \"반드시 영문+숫자 조합만 가능합니다.\"\r\n            false\r\n        }\r\n    }\r\n\r\n    // 한국어 확인 함수\r\n    fun checkKorean(editText: EditText): Boolean{\r\n        Log.d(TAG, \" - checkKorean\")\r\n        val text = editText.text.toString()\r\n        return if(text.contains(Regex(\"[a-zA-Z0-9]+\"))){\r\n            editText.error = \"한글만 입력 가능합니다.\"\r\n            false\r\n        } else true\r\n    }\r\n    // 한글 + 숫자 확인 함수(영어 입력 X)\r\n    fun checkKoreanNumber(editText: EditText): Boolean{\r\n        Log.d(TAG, \" - checkKorean\")\r\n        val text = editText.text.toString()\r\n        return if(text.contains(Regex(\"[a-zA-Z]+\"))){\r\n            editText.error = \"한글과 숫자만 입력 가능합니다.\"\r\n            false\r\n        } else true\r\n    }\r\n\r\n    // 숫자 + 11글자 확인 함수\r\n    fun checkPhoneNumber(editText: EditText): Boolean {\r\n        Log.d(TAG, \" - checkPhoneNumber\")\r\n\r\n        val regex = Regex(\"[0-9]+\")\r\n        val isNumeric = editText.text.toString().matches(regex)\r\n        val isElevenDigits = editText.text.toString().length == 11\r\n        // 숫자로만 이루어졌는지 확인\r\n        if (!isNumeric) {\r\n            editText.error = \"숫자만 입력해주십시오.\"\r\n            return false\r\n        }\r\n        // 11글자인지 확인\r\n        if (!isElevenDigits) {\r\n            editText.error = \"11자리를 입력해주십시오.\"\r\n            return false\r\n        }\r\n        return isNumeric && isElevenDigits\r\n    }\r\n    // 카테고리 목록(Spinner)\r\n    private fun setUpCategorySpinner(){\r\n        val category = resources.getStringArray(R.array.category)\r\n        println(\"=========================================================================\")\r\n        println(\"${category::class.simpleName}\")\r\n        val categoryAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, category)\r\n        binding.sellerRegisterCategorySpinner.adapter = categoryAdapter\r\n    }\r\n    // Deadline 시간(시) 목록(Spinner)\r\n    private fun setUpTimeSpinner(){\r\n        val time = Array<String>(24) { i -> (i).toString() }\r\n        val timeAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, time)\r\n        binding.sellerRegisterTimeSpinner.adapter = timeAdapter\r\n    }\r\n    // Deadline 시간(분) 목록(Spinner)\r\n    private fun setUpMinuteSpinner(){\r\n        val minute = Array<String>(60) { i -> (i).toString() }\r\n        val minuteAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, minute)\r\n        binding.sellerRegisterMinuteSpinner.adapter = minuteAdapter\r\n    }\r\n    // 카테고리, Deadline 입력 시 핸들러\r\n    private fun spinnerHandler(){\r\n        binding.sellerRegisterCategorySpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener{\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                Log.d(TAG, \"$position\")\r\n                category = position\r\n            }\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n            }\r\n        }\r\n        binding.sellerRegisterTimeSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener{\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                Log.d(TAG, \"$position\")\r\n                time = position\r\n            }\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n            }\r\n        }\r\n        binding.sellerRegisterMinuteSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener{\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                Log.d(TAG, \"$position\")\r\n                minute = position\r\n            }\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/icontest2/SellerRegisterActivity.kt b/app/src/main/java/com/example/icontest2/SellerRegisterActivity.kt
--- a/app/src/main/java/com/example/icontest2/SellerRegisterActivity.kt	
+++ b/app/src/main/java/com/example/icontest2/SellerRegisterActivity.kt	
@@ -173,7 +173,8 @@
                 // 주소
                 if (s == sellerRegisterLocationEdt.editableText){
                     Log.d(TAG, "in - location")
-                    locationCheck = checkKoreanNumber(sellerRegisterLocationEdt)
+                    locationCheck = checkSpecialCharacters(s, sellerRegisterPasswordEdt) &&
+                            checkKoreanNumber(sellerRegisterLocationEdt)
                 }
             }
         }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-03-27_오후_2_37_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-27_오후_2_37_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-27_오후_2_37_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-27_오후_2_37_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,87 +0,0 @@
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch	(revision efb96718ca4fc7acadbb26c189c7520555ed17bd)
-+++ /dev/null	(revision efb96718ca4fc7acadbb26c189c7520555ed17bd)
-@@ -1,19 +0,0 @@
--Index: .idea/vcs.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$/..\" vcs=\"Git\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/vcs.xml b/.idea/vcs.xml
----- a/.idea/vcs.xml	(revision 8485395d607086a3e75f813c0a2cfa5bee0744a4)
--+++ b/.idea/vcs.xml	(date 1679162780870)
--@@ -1,6 +1,6 @@
-- <?xml version="1.0" encoding="UTF-8"?>
-- <project version="4">
--   <component name="VcsDirectoryMappings">
---    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
--+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19__3_20__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19__3_20__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19__3_20__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19__3_20__Changes_.xml	(revision efb96718ca4fc7acadbb26c189c7520555ed17bd)
-+++ /dev/null	(revision efb96718ca4fc7acadbb26c189c7520555ed17bd)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]" date="1679163643629" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-03-19 오전 3:20 [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: app/src/main/res/layout/activity_location_register.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".LocationRegisterActivity\">\r\n\r\n    <com.google.android.gms.maps.MapView\r\n        android:id=\"@+id/mapView\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\" />\r\n\r\n</LinearLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/activity_location_register.xml b/app/src/main/res/layout/activity_location_register.xml
---- a/app/src/main/res/layout/activity_location_register.xml	(revision efb96718ca4fc7acadbb26c189c7520555ed17bd)
-+++ b/app/src/main/res/layout/activity_location_register.xml	(date 1679895273695)
-@@ -5,11 +5,13 @@
-     xmlns:tools="http://schemas.android.com/tools"
-     android:layout_width="match_parent"
-     android:layout_height="match_parent"
--    tools:context=".LocationRegisterActivity">
-+    tools:context=".LocationRegisterActivity"
-+    android:gravity="center">
- 
-     <com.google.android.gms.maps.MapView
-         android:id="@+id/mapView"
--        android:layout_width="match_parent"
--        android:layout_height="match_parent" />
-+        android:layout_width="300dp"
-+        android:layout_height="200dp"
-+        android:layout_gravity="center"/>
- 
- </LinearLayout>
-\ No newline at end of file
-Index: app/src/main/AndroidManifest.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.icontest2\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.QUERY_ALL_PACKAGES\"\r\n        tools:ignore=\"QueryAllPackagesPermission\" />\r\n\r\n    <queries>\r\n        <package android:name=\"com.vuforia.engine.coresamples\" />\r\n    </queries>\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n\r\n    <application\r\n        android:name=\".KakaoInit\"\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/food_truck\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/food_truck_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.IconTest2\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".LocationRegisterActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MenuListsActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SignUpLocationActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MyPageActivity\"\r\n            android:exported=\"false\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"@string/google_maps_key\" />\r\n\r\n        <activity\r\n            android:name=\".MapActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".SearchActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SignUpActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".LoginActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".SplashActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity> <!-- Kakao 로그인 -->\r\n        <activity\r\n            android:name=\"com.kakao.sdk.auth.AuthCodeHandlerActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.VIEW\" />\r\n\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n                <category android:name=\"android.intent.category.BROWSABLE\" />\r\n\r\n                <!-- Redirect URI: \"kakao{NATIVE_APP_KEY}://oauth\" -->\r\n                <!-- scheme-example: \"kakao{NATIVE_APP_KEY}\" -->\r\n                <data\r\n                    android:host=\"oauth\"\r\n                    android:scheme=\"@string/kakao_native_key_manifest\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
---- a/app/src/main/AndroidManifest.xml	(revision efb96718ca4fc7acadbb26c189c7520555ed17bd)
-+++ b/app/src/main/AndroidManifest.xml	(date 1679895273717)
-@@ -14,10 +14,6 @@
-         <package android:name="com.vuforia.engine.coresamples" />
-     </queries>
- 
--    <uses-permission android:name="android.permission.INTERNET" />
--    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
--    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
--
-     <application
-         android:name=".KakaoInit"
-         android:allowBackup="true"
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_4_09_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_4_09_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_4_09_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_4_09_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,233 +0,0 @@
-Index: app/src/main/AndroidManifest.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.icontest2\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.QUERY_ALL_PACKAGES\"\r\n        tools:ignore=\"QueryAllPackagesPermission\" />\r\n\r\n    <queries>\r\n        <package android:name=\"com.vuforia.engine.coresamples\" />\r\n    </queries>\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n\r\n    <application\r\n        android:name=\".KakaoInit\"\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/food_truck\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/food_truck_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.IconTest2\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".CustomerLocationRegister\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".LocationRegisterActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MenuListsActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SignUpLocationActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MyPageActivity\"\r\n            android:exported=\"false\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"@string/google_maps_key\" />\r\n\r\n        <activity\r\n            android:name=\".MapActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".SearchActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SignUpActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".LoginActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".SplashActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity> <!-- Kakao 로그인 -->\r\n        <activity\r\n            android:name=\"com.kakao.sdk.auth.AuthCodeHandlerActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.VIEW\" />\r\n\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n                <category android:name=\"android.intent.category.BROWSABLE\" />\r\n\r\n                <!-- Redirect URI: \"kakao{NATIVE_APP_KEY}://oauth\" -->\r\n                <!-- scheme-example: \"kakao{NATIVE_APP_KEY}\" -->\r\n                <data\r\n                    android:host=\"oauth\"\r\n                    android:scheme=\"@string/kakao_native_key_manifest\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
---- a/app/src/main/AndroidManifest.xml	(revision f92edb87f2e55695474c9ff524a64350fb403d11)
-+++ b/app/src/main/AndroidManifest.xml	(date 1679842281614)
-@@ -29,9 +29,7 @@
-         android:supportsRtl="true"
-         android:theme="@style/Theme.IconTest2"
-         tools:targetApi="31">
--        <activity
--            android:name=".CustomerLocationRegister"
--            android:exported="false" />
-+
-         <activity
-             android:name=".LocationRegisterActivity"
-             android:exported="false" />
-Index: app/src/main/java/com/example/icontest2/SignUpActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.icontest2\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.InputFilter\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.widget.EditText\r\nimport com.example.icontest2.databinding.ActivitySignUpBinding\r\nimport java.util.regex.Pattern\r\nimport android.Manifest\r\nimport android.content.pm.PackageManager\r\nimport android.location.Geocoder\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport java.util.*\r\n\r\n\r\nclass SignUpActivity : AppCompatActivity(), OnMapReadyCallback {\r\n    private lateinit var binding: ActivitySignUpBinding\r\n    private var TAG = \"SignUpActivity\"\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var buttonLocation: Button\r\n    private val REQUEST_LOCATION_PERMISSION = 1\r\n\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?){\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivitySignUpBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        val returnIntent = Intent(this, LoginActivity::class.java)\r\n        val locationRegisterIntent = Intent(this, LocationRegisterActivity::class.java)\r\n\r\n        // 아이디, 비밀번호, 비밀번호 확인, 이름, 휴대폰번호의 editText id\r\n        val signUpIdEdit = binding.signUpIdEdit // 아이디\r\n        val signUpPasswdEdit = binding.signUpPasswdEdit\r\n        val signUpCheckPasswdEdit = binding.signUpCheckPasswdEdit\r\n        val signUpNameEdit = binding.signUpNameEdit\r\n        val signUpPhoneEdit = binding.signUpPhoneEdit\r\n        val signUptextIdLengthChecker = binding.mainTextInputLayoutID\r\n        val signUptextPwLengthChecker = binding.mainTextInputLayoutPW\r\n        val lengthCheck = binding.mainTextInputLayoutCreateName\r\n        val signUPEdit_ID = binding.EditID // 아이디 만들기\r\n        val signUPEdit_PW = binding.EditPW // 비밀번호 만들기\r\n        val signUpCreate_name = binding.createName // 이름 만들기\r\n        val signUpCreate_phone_number = binding.phoneNumberCreate // 폰번호 숫자만 11자제한\r\n        setEditTextInput(signUpCreate_phone_number, 11)\r\n\r\n        buttonLocation = findViewById(R.id.button_location) // 사용자 위치 조회 및 입력\r\n        buttonLocation.setOnClickListener {\r\n            requestLocationPermission()\r\n            showUserLocation()\r\n        }\r\n        val mapFragment =\r\n            supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n\r\n        val buttonShowLocation = findViewById<Button>(R.id.button_location)\r\n        buttonShowLocation.setOnClickListener {\r\n            if (ContextCompat.checkSelfPermission(this,\r\n                    Manifest.permission.ACCESS_FINE_LOCATION)\r\n                == PackageManager.PERMISSION_GRANTED) {\r\n                // 위치 권한이 허용된 경우\r\n                showUserLocation()\r\n            } else {\r\n                // 위치 권한이 허용되지 않은 경우\r\n                ActivityCompat.requestPermissions(this,\r\n                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                    REQUEST_LOCATION_PERMISSION)\r\n            }\r\n        }\r\n\r\n\r\n\r\n        // 아이디, 패스워드 초과 경고 메세지\r\n        fun textLengthChecker() {\r\n            signUptextIdLengthChecker.isCounterEnabled = true\r\n            signUptextPwLengthChecker.isCounterEnabled = true\r\n            lengthCheck.isCounterEnabled = true\r\n\r\n            signUptextIdLengthChecker.counterMaxLength = 15 // ID 최대 길이\r\n            signUptextPwLengthChecker.counterMaxLength = 20 // PW 최대 길이\r\n            lengthCheck.counterMaxLength = 10\r\n\r\n            signUptextIdLengthChecker.isErrorEnabled = true\r\n            signUptextPwLengthChecker.isErrorEnabled = true\r\n            lengthCheck.isErrorEnabled = true\r\n\r\n            signUPEdit_ID.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                    if (signUPEdit_ID.length() > 15) {\r\n                        signUptextIdLengthChecker.error = \"ID의 글자 수를 초과하였습니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                    if (signUPEdit_ID.length() < 5) {\r\n                        signUptextIdLengthChecker.error = \"ID는 최소 5자 이상입니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                }\r\n                override fun afterTextChanged(p0: Editable?) {\r\n                }\r\n\r\n            })\r\n\r\n            signUPEdit_PW.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                    if (signUPEdit_PW.length() > 20) {\r\n                        signUptextPwLengthChecker.error = \"PW의 글자 수를 초과하였습니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                    if (signUPEdit_PW.length() < 8) {\r\n                        signUptextPwLengthChecker.error = \"PW는 최소 8자 이상입니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                }\r\n                override fun afterTextChanged(p0: Editable?) {\r\n                }\r\n            })\r\n            signUpCreate_name.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                    if (signUpCreate_name.length() > 10) {\r\n                        lengthCheck.error = \"이름의 글자 수를 초과 하였습니다.\"\r\n                    } else {\r\n                        lengthCheck.error = null\r\n                    }\r\n                }\r\n                override fun afterTextChanged(p0: Editable?) {\r\n                }\r\n            })\r\n        }\r\n\r\n        val textWatcher = object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            // 사용자의 입력이 끝난 후 처리\r\n            override fun afterTextChanged(s: Editable?) {\r\n                Log.d(TAG, \"${s}\")\r\n                // 아이디\r\n                if (s == signUpIdEdit.editableText) {\r\n                    Log.d(TAG, \"in - id - length\")\r\n                    val minLength = 5\r\n                    val maxLength = 15\r\n                    checkWhiteSpace(s, signUpIdEdit) // 공백 문자 확인\r\n                    checkSpecialCharacters(s, signUpIdEdit) // 특수 문자 확인\r\n                    checkLength(s, signUpIdEdit, maxLength, minLength) // 문자열 길이 확인\r\n                }\r\n                // 비밀번호\r\n                if (s == signUpPasswdEdit.editableText) {\r\n                    Log.d(TAG, \"in - pw - length\")\r\n                    val minLength = 8\r\n                    val maxLength = 20\r\n                    checkWhiteSpace(s, signUpPasswdEdit) // 공백 문자 확인\r\n                    checkSpecialCharacters(s, signUpPasswdEdit) // 특수 문자 확인\r\n                    checkAlphaNumber(signUpPasswdEdit) // 영문 + 숫자 확인\r\n                    checkLength(s, signUpPasswdEdit, maxLength, minLength) // 문자열 길이 확인\r\n                }\r\n                // 비밀번호 체크\r\n                if (s == signUpCheckPasswdEdit.editableText) {\r\n                    Log.d(TAG, \"in - pwcheck - length\")\r\n                    if (signUpPasswdEdit.text.toString() != signUpCheckPasswdEdit.text.toString()) {\r\n                        signUpCheckPasswdEdit.error = \"비밀번호가 일치하지 않습니다.\"\r\n                    } else {\r\n                        signUpCheckPasswdEdit.error = null\r\n                    }\r\n                }\r\n                // 이름\r\n                if (s == signUpNameEdit.editableText) {\r\n                    Log.d(TAG, \"in - name - length\")\r\n                    val minLength = 1\r\n                    val maxLength = 10\r\n                    checkWhiteSpace(s, signUpNameEdit) // 공백 문자 확인\r\n                    checkSpecialCharacters(s, signUpNameEdit) // 특수 문자 확인\r\n                    checkKorean(signUpNameEdit) // 한글 확인\r\n                    checkLength(s, signUpNameEdit, maxLength, minLength) // 문자열 길이 확인\r\n                }\r\n                // 휴대폰번호\r\n                if (s == signUpPhoneEdit.editableText) {\r\n                    Log.d(TAG, \"in - phone - length\")\r\n                    checkWhiteSpace(s, signUpPhoneEdit) // 공백 문자 확인\r\n                    checkSpecialCharacters(s, signUpPhoneEdit) // 특수 문자 확인\r\n                    checkPhoneNumber(signUpPhoneEdit) // 숫자 및 11자 확인\r\n                }\r\n            }\r\n        }\r\n\r\n        // 각 항목별 공백, 특수 문자 처리\r\n        signUpIdEdit.addTextChangedListener(textWatcher)\r\n        signUpPasswdEdit.addTextChangedListener(textWatcher)\r\n        signUpCheckPasswdEdit.addTextChangedListener(textWatcher)\r\n        signUpNameEdit.addTextChangedListener(textWatcher)\r\n        signUpPhoneEdit.addTextChangedListener(textWatcher)\r\n        notKorean(signUPEdit_ID) // id 한글 예외처리\r\n        notKorean(signUPEdit_PW) // pw 한글 예외처리\r\n        onlyKorean(signUpCreate_name) // 이름 입력시 한글만\r\n        checkwhite(signUpCreate_name) // 이름 입력시 공백 확인\r\n        textLengthChecker() // 문자길이 체크\r\n\r\n        binding.signUpBtn.setOnClickListener {\r\n\r\n            returnIntent.putExtra(\"name\", binding.signUpNameEdit.text.toString())\r\n            startActivity(returnIntent)\r\n            finish()\r\n        }\r\n\r\n        binding.signUpLocationBtn.setOnClickListener {\r\n            startActivity(locationRegisterIntent)\r\n        }\r\n\r\n    }\r\n    // 공백 문자 확인 함수\r\n    fun checkWhiteSpace(editable: Editable?, editText: EditText) {\r\n        // EditText의 문자열 가져오기\r\n        val text = editable.toString()\r\n        Log.d(TAG, \"${text} - checkWhiteSpace\")\r\n        // 결과 출력\r\n        if (text.contains(\" \")) {\r\n            Log.d(TAG, \"${text} - 공백있음\")\r\n            editText.error = \"공백이 포함되어 있습니다.\"\r\n        }\r\n    }\r\n\r\n    // 특수 문자 확인 함수\r\n    fun checkSpecialCharacters(editable: Editable?, editText: EditText) {\r\n        // EditText의 문자열 가져오기\r\n        val text = editable.toString()\r\n        Log.d(TAG, \"${text} - checkSpecialCharacters\")\r\n\r\n        // 검사할 특수 문자 지정\r\n        val specialCharacters = \"!@#$%^&*()_-+=|\\\\{}[]:;\\\"'<>,.?/~`\"\r\n\r\n        // 결과 출력\r\n        if (text.matches(\".*[!@#\\$%^&*(),.?\\\":{}|<>\\\\[\\\\]~-].*\".toRegex())) {\r\n            editText.error = \"특수문자는 입력할 수 없습니다.\"\r\n        }\r\n\r\n    }\r\n\r\n    // 문자 길이 확인 함수\r\n    fun checkLength(editable: Editable?, editText: EditText, maxLength: Int, minLength: Int) {\r\n        // EditText의 문자열 가져오기\r\n        val text = editable.toString()\r\n        Log.d(TAG, \"${text} - checkLength\")\r\n\r\n        val length = text.length\r\n\r\n        if (length < minLength) {\r\n            editText.error = \"최소 ${minLength}자 이상 입력하세요\"\r\n        } else if (length > maxLength) {\r\n            editText.error = \"최대 ${maxLength}자까지 입력 가능합니다\"\r\n        }\r\n\r\n    }\r\n\r\n    // 영문 + 숫자 확인 함수\r\n    fun checkAlphaNumber(editText: EditText) {\r\n        Log.d(TAG, \" - checkAlphaNumber\")\r\n\r\n        val alphaNumbericRegex = Regex(\"[a-zA-Z0-9]+\")\r\n        val inputFilter = InputFilter { source, start, end, dest, dstart, dend ->\r\n            val input = dest.subSequence(0, dstart).toString() + source.subSequence(\r\n                start,\r\n                end\r\n            ) + dest.subSequence(dend, dest.length).toString()\r\n            return@InputFilter if (input.matches(alphaNumbericRegex)) null else \"\"\r\n        }\r\n        editText.filters = arrayOf(inputFilter)\r\n\r\n    }\r\n\r\n    // 한국어 확인 함수\r\n    fun checkKorean(editText: EditText) {\r\n        Log.d(TAG, \" - checkKorean\")\r\n\r\n        val inputFilter = InputFilter { source, _, _, _, _, _ ->\r\n            val regex = Regex(\"[ㄱ-ㅎ가-힣]+\")\r\n            if (source.toString().matches(regex)) {\r\n                source\r\n            } else {\r\n                \"\"\r\n            }\r\n        }\r\n        editText.filters = arrayOf(inputFilter)\r\n    }\r\n\r\n    // 숫자 + 11글자 확인 함수\r\n    fun checkPhoneNumber(editText: EditText): Boolean {\r\n        Log.d(TAG, \" - checkPhoneNumber\")\r\n\r\n        val regex = Regex(\"[0-9]+\")\r\n        val isNumeric = editText.text.toString().matches(regex)\r\n        val isElevenDigits = editText.text.toString().length == 11\r\n        // 숫자로만 이루어졌는지 확인\r\n        if (!isNumeric) {\r\n            editText.error = \"숫자만 입력해주십시오.\"\r\n        }\r\n        // 11글자인지 확인\r\n        if (!isElevenDigits) {\r\n            editText.error = \"11자리를 입력해주십시오.\"\r\n        }\r\n        return isNumeric && isElevenDigits\r\n    }\r\n    // 한글예외처리 함수\r\n    fun notKorean(editText: EditText){\r\n        Log.d(TAG, \" - checkNotKorean\")\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n            }\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n            }\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val text = s.toString()\r\n                if (text.matches(Regex(\"[ㄱ-ㅎ가-힣]+\"))) {\r\n                    editText.error = \"한글은 입력할 수 없습니다.\"\r\n                } else {\r\n                    editText.error = null\r\n                }\r\n            }\r\n        })\r\n    }\r\n    // 한글만 입력함수\r\n    fun onlyKorean(editText: EditText){\r\n        Log.d(TAG, \" - checkNotKorean\")\r\n        val pattern = Pattern.compile(\"[^ㄱ-ㅎ가-힣]*$\") // 한글을 제외한 문자열 패턴\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val text = s.toString()\r\n                val matcher = pattern.matcher(text)\r\n                if (matcher.matches()) {\r\n                    editText.error = \"한글을 제외한 문자열은 입력할 수 없습니다.\"\r\n                } else {\r\n                    editText.error = null\r\n                }\r\n            }\r\n        })\r\n    }\r\n    // 공백체크함수\r\n    fun checkwhite(editText: EditText){\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            override fun afterTextChanged(s: Editable?) {\r\n                // EditText의 문자열 가져오기\r\n                val text = s.toString()\r\n                Log.d(TAG, \"${text} - checkWhiteSpace\")\r\n                // 결과 출력\r\n                if (text.contains(\" \")) {\r\n                    Log.d(TAG, \"${text} - 공백있음\")\r\n                    editText.error = \"공백이 포함되어 있습니다.\"\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n    // 폰번호 입력시 11자제한, 숫자만 입력\r\n    fun setEditTextInput(editText: EditText, maxLength: Int) {\r\n        val inputFilter = arrayOf<InputFilter>(InputFilter { source, _, _, _, _, _ ->\r\n            if (source.toString().matches(Regex(\"[0-9]+\"))) {\r\n                null // 숫자일 경우, null 리턴\r\n            } else {\r\n                \"\" // 숫자가 아닐 경우, 빈 문자열(\"\") 리턴\r\n            }\r\n        })\r\n        editText.filters = inputFilter\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val input = s.toString()\r\n                if (input.length > maxLength) {\r\n                    editText.error = \"입력할 수 있는 숫자는 ${maxLength}자리 이하입니다.\"\r\n                } else {\r\n                    editText.error = null\r\n                }\r\n                val text = s.toString()\r\n                Log.d(TAG, \"${text} - checkWhiteSpace\")\r\n                // 결과 출력\r\n                if (text.contains(\" \")) {\r\n                    Log.d(TAG, \"${text} - 공백있음\")\r\n                    editText.error = \"공백이 포함되어 있습니다.\"\r\n                }\r\n\r\n\r\n            }\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n        })\r\n    }\r\n    // 사용자 위치 조회, 위치 입력\r\n    private fun showUserLocation() {\r\n        val editText = findViewById<EditText>(R.id.editText)\r\n        if (ContextCompat.checkSelfPermission(this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n            mMap.isMyLocationEnabled = true\r\n\r\n            // 사용자 위치 가져오기\r\n            val fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)\r\n            fusedLocationProviderClient.lastLocation.addOnSuccessListener { location ->\r\n                if (location != null) {\r\n                    val geocoder = Geocoder(this, Locale.KOREAN)\r\n                    val addresses = geocoder.getFromLocation(location.latitude, location.longitude, 1)\r\n                    if (addresses != null) {\r\n                        if (addresses.isNotEmpty()) {\r\n                            val address = addresses[0]\r\n                            val addressStr = address.getAddressLine(0)\r\n                            editText.setText(addressStr)\r\n                        }\r\n                    }\r\n\r\n\r\n                    val latLng = LatLng(location.latitude, location.longitude)\r\n                    mMap.addMarker(MarkerOptions().position(latLng).title(\"User Location\"))\r\n                    mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 15f))\r\n                }\r\n            }\r\n        }\r\n    }\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        mMap = googleMap\r\n        mMap.uiSettings.isZoomControlsEnabled = true\r\n    }\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == REQUEST_LOCATION_PERMISSION) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                showUserLocation()\r\n            }\r\n        }\r\n    }\r\n    private fun requestLocationPermission() {\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            showUserLocation()\r\n        } else {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                REQUEST_LOCATION_PERMISSION\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/icontest2/SignUpActivity.kt b/app/src/main/java/com/example/icontest2/SignUpActivity.kt
---- a/app/src/main/java/com/example/icontest2/SignUpActivity.kt	(revision f92edb87f2e55695474c9ff524a64350fb403d11)
-+++ b/app/src/main/java/com/example/icontest2/SignUpActivity.kt	(date 1679897482506)
-@@ -341,16 +341,15 @@
-         })
-     }
-     // 한글만 입력함수
--    fun onlyKorean(editText: EditText){
--        Log.d(TAG, " - checkNotKorean")
--        val pattern = Pattern.compile("[^ㄱ-ㅎ가-힣]*$") // 한글을 제외한 문자열 패턴
-+    fun onlyKorean(editText: EditText) {
-+        val pattern = Pattern.compile("[^ㄱ-ㅎ가-힣]*")
-         editText.addTextChangedListener(object : TextWatcher {
-             override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
-             override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
-             override fun afterTextChanged(s: Editable?) {
-                 val text = s.toString()
-                 val matcher = pattern.matcher(text)
--                if (matcher.matches()) {
-+                if (!matcher.matches()) {
-                     editText.error = "한글을 제외한 문자열은 입력할 수 없습니다."
-                 } else {
-                     editText.error = null
-@@ -358,6 +357,7 @@
-             }
-         })
-     }
-+
-     // 공백체크함수
-     fun checkwhite(editText: EditText){
-         editText.addTextChangedListener(object : TextWatcher {
-Index: app/src/main/java/com/example/icontest2/CustomerLocationRegister.kt
-===================================================================
-diff --git a/app/src/main/java/com/example/icontest2/CustomerLocationRegister.kt b/app/src/main/java/com/example/icontest2/CustomerLocationRegister.kt
-deleted file mode 100644
---- a/app/src/main/java/com/example/icontest2/CustomerLocationRegister.kt	(revision f92edb87f2e55695474c9ff524a64350fb403d11)
-+++ /dev/null	(revision f92edb87f2e55695474c9ff524a64350fb403d11)
-@@ -1,85 +0,0 @@
--package com.example.icontest2
--
--import android.Manifest
--import android.app.Activity
--import android.content.Intent
--import android.content.pm.PackageManager
--import android.location.Geocoder
--import android.os.Bundle
--import android.widget.Button
--import android.widget.EditText
--import androidx.appcompat.app.AppCompatActivity
--import androidx.core.app.ActivityCompat
--import com.google.android.gms.location.FusedLocationProviderClient
--import com.google.android.gms.maps.*
--import com.google.android.gms.maps.model.LatLng
--import com.google.android.gms.maps.model.MarkerOptions
--import java.io.IOException
--import java.util.*
--
--class CustomerLocationRegister : AppCompatActivity(),OnMapReadyCallback {
--    private lateinit var mMap: GoogleMap
--    private lateinit var userLocation: LatLng
--    private lateinit var addressEditText: EditText
--    override fun onCreate(savedInstanceState: Bundle?) {
--        super.onCreate(savedInstanceState)
--        setContentView(R.layout.activity_customer_location_register)
--
--        addressEditText = findViewById(R.id.address_text_view)
--        val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment
--        mapFragment.getMapAsync(this)
--
--        val locationButton = findViewById<Button>(R.id.location_button)
--        locationButton.setOnClickListener {
--            mMap.clear()
--            val location = mMap.myLocation
--            if (location != null) {
--                userLocation = LatLng(location.latitude, location.longitude) // userLocation 초기화
--                mMap.addMarker(MarkerOptions().position(userLocation).title("User Location"))
--                mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(userLocation, 15f))
--
--                val geocoder = Geocoder(this)
--                try {
--                    val addresses =
--                        geocoder.getFromLocation(userLocation.latitude, userLocation.longitude, 1)
--                    if (addresses != null) {
--                        if (addresses.isNotEmpty() && addresses[0].getAddressLine(0) != null) {
--                            val address = addresses[0].getAddressLine(0)
--                            addressEditText.setText(address)
--                        } else {
--                            addressEditText.setText("주소 정보를 가져올 수 없습니다.")
--                        }
--                    }
--                } catch (e: IOException) {
--                    e.printStackTrace()
--                }
--            }
--        }
--    }
--
--    override fun onBackPressed() {
--        val userLocation = mMap.myLocation
--        if (userLocation != null) {
--            val geocoder = Geocoder(this, Locale.getDefault())
--            val addresses = geocoder.getFromLocation(userLocation.latitude, userLocation.longitude, 1)
--            if (addresses != null) {
--                if (addresses.isNotEmpty()) {
--                    val address = addresses[0].getAddressLine(0)
--                    val intent = Intent()
--                    intent.putExtra("address", address)
--                    intent.putExtra("latitude", userLocation.latitude) // userLocation 정보 추가
--                    intent.putExtra("longitude", userLocation.longitude)
--                    setResult(Activity.RESULT_OK, intent)
--                }
--            }
--        }
--        super.onBackPressed()
--    }
--
--    override fun onMapReady(p0: GoogleMap) {
--
--    }
--
--
--}
--
-Index: app/src/main/res/layout/activity_customer_location_register.xml
-===================================================================
-diff --git a/app/src/main/res/layout/activity_customer_location_register.xml b/app/src/main/res/layout/activity_customer_location_register.xml
-deleted file mode 100644
---- a/app/src/main/res/layout/activity_customer_location_register.xml	(revision f92edb87f2e55695474c9ff524a64350fb403d11)
-+++ /dev/null	(revision f92edb87f2e55695474c9ff524a64350fb403d11)
-@@ -1,75 +0,0 @@
--<?xml version="1.0" encoding="utf-8"?>
--<LinearLayout
--    xmlns:android="http://schemas.android.com/apk/res/android"
--    android:layout_width="match_parent"
--    android:layout_height="match_parent"
--    android:orientation="vertical">
--
--    <!-- 지도를 표시할 프래그먼트 -->
--    <fragment
--        android:id="@+id/map"
--        android:name="com.google.android.gms.maps.SupportMapFragment"
--        android:layout_width="match_parent"
--        android:layout_height="match_parent"
--        android:layout_above="@+id/layout"
--        android:layout_alignParentTop="true" />
--
--    <!-- 사용자 위치를 표시할 레이아웃 -->
--    <RelativeLayout
--        android:id="@+id/layout"
--        android:layout_width="match_parent"
--        android:layout_height="100dp"
--        android:layout_alignParentBottom="true"
--        android:background="@android:color/white">
--
--        <TextView
--            android:id="@+id/address_text_view"
--            android:layout_width="match_parent"
--            android:layout_height="wrap_content"
--            android:layout_margin="10dp"
--            android:gravity="center"
--            android:text="사용자 위치를 조회해주세요."
--            android:textColor="@android:color/black"
--            android:textSize="16sp" />
--
--        <Button
--            android:id="@+id/location_button"
--            android:layout_below="@+id/address_text_view"
--            android:layout_width="wrap_content"
--            android:layout_height="wrap_content"
--            android:layout_weight="1"
--            android:text="사용자 위치 조회" />
--
--    </RelativeLayout>
--<!--    <com.google.android.material.textfield.TextInputLayout // 복사한 부분 시작-->
--<!--        android:id="@+id/main_textInputLayout_customer_location_register"-->
--<!--        android:layout_width="match_parent"-->
--<!--        android:layout_height="wrap_content">-->
--<!--        <EditText-->
--<!--            android:id="@+id/customer_location_register"-->
--<!--            android:layout_width="match_parent"-->
--<!--            android:layout_height="50dp"-->
--<!--            android:inputType="text"-->
--<!--            android:hint="주소를 등록해주세요."-->
--<!--            android:layout_gravity="center"/>-->
--
--<!--    </com.google.android.material.textfield.TextInputLayout>-->
--<!--    <com.google.android.gms.maps.MapView-->
--<!--        android:id="@+id/map_view"-->
--<!--        android:layout_width="match_parent"-->
--<!--        android:layout_height="match_parent" />-->
--
--<!--    <Button-->
--<!--        android:id="@+id/customer_location_register_btn"-->
--<!--        android:layout_width="wrap_content"-->
--<!--        android:layout_height="wrap_content"-->
--<!--        android:text="위치등록"/>-->
--<!--    <FrameLayout-->
--<!--        android:id="@+id/map_container"-->
--<!--        android:layout_width="match_parent"-->
--<!--        android:layout_height="match_parent"/>-->
--
--</LinearLayout>
--
--
--
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_2_34_[Changes]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_2_34_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_2_34_[Changes]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_2_34_[Changes]1/shelved.patch	
+++ /dev/null	
@@ -1,87 +0,0 @@
-Index: app/src/main/res/layout/activity_location_register.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".LocationRegisterActivity\">\r\n\r\n    <com.google.android.gms.maps.MapView\r\n        android:id=\"@+id/mapView\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\" />\r\n\r\n</LinearLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/activity_location_register.xml b/app/src/main/res/layout/activity_location_register.xml
---- a/app/src/main/res/layout/activity_location_register.xml	
-+++ b/app/src/main/res/layout/activity_location_register.xml	
-@@ -5,11 +5,13 @@
-     xmlns:tools="http://schemas.android.com/tools"
-     android:layout_width="match_parent"
-     android:layout_height="match_parent"
--    tools:context=".LocationRegisterActivity">
-+    tools:context=".LocationRegisterActivity"
-+    android:gravity="center">
- 
-     <com.google.android.gms.maps.MapView
-         android:id="@+id/mapView"
--        android:layout_width="match_parent"
--        android:layout_height="match_parent" />
-+        android:layout_width="300dp"
-+        android:layout_height="200dp"
-+        android:layout_gravity="center"/>
- 
- </LinearLayout>
-\ No newline at end of file
-Index: app/src/main/AndroidManifest.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.icontest2\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.QUERY_ALL_PACKAGES\"\r\n        tools:ignore=\"QueryAllPackagesPermission\" />\r\n\r\n    <queries>\r\n        <package android:name=\"com.vuforia.engine.coresamples\" />\r\n    </queries>\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n\r\n    <application\r\n        android:name=\".KakaoInit\"\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/food_truck\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/food_truck_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.IconTest2\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".CustomerLocationRegister\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".LocationRegisterActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MenuListsActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SignUpLocationActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MyPageActivity\"\r\n            android:exported=\"false\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"@string/google_maps_key\" />\r\n\r\n        <activity\r\n            android:name=\".MapActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".SearchActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SignUpActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".LoginActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".SplashActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity> <!-- Kakao 로그인 -->\r\n        <activity\r\n            android:name=\"com.kakao.sdk.auth.AuthCodeHandlerActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.VIEW\" />\r\n\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n                <category android:name=\"android.intent.category.BROWSABLE\" />\r\n\r\n                <!-- Redirect URI: \"kakao{NATIVE_APP_KEY}://oauth\" -->\r\n                <!-- scheme-example: \"kakao{NATIVE_APP_KEY}\" -->\r\n                <data\r\n                    android:host=\"oauth\"\r\n                    android:scheme=\"@string/kakao_native_key_manifest\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
---- a/app/src/main/AndroidManifest.xml	
-+++ b/app/src/main/AndroidManifest.xml	
-@@ -14,10 +14,6 @@
-         <package android:name="com.vuforia.engine.coresamples" />
-     </queries>
- 
--    <uses-permission android:name="android.permission.INTERNET" />
--    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
--    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
--
-     <application
-         android:name=".KakaoInit"
-         android:allowBackup="true"
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch	
-+++ /dev/null	
-@@ -1,19 +0,0 @@
--Index: .idea/vcs.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$/..\" vcs=\"Git\" />\r\n  </component>\r\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/vcs.xml b/.idea/vcs.xml
----- a/.idea/vcs.xml	(revision 8485395d607086a3e75f813c0a2cfa5bee0744a4)
--+++ b/.idea/vcs.xml	(date 1679162780870)
--@@ -1,6 +1,6 @@
-- <?xml version="1.0" encoding="UTF-8"?>
-- <project version="4">
--   <component name="VcsDirectoryMappings">
---    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
--+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
--   </component>
-- </project>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19__3_20__Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19__3_20__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19__3_20__Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19__3_20__Changes_.xml	
-+++ /dev/null	
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]" date="1679163643629" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023-03-19_오전_3_20_[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2023-03-19 오전 3:20 [Changes]" />
--</changelist>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_2_38_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_2_38_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_2_38_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_2_38_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,49 +0,0 @@
-Index: app/src/main/res/layout/activity_location_register.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".LocationRegisterActivity\">\r\n\r\n    <com.google.android.gms.maps.MapView\r\n        android:id=\"@+id/mapView\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\" />\r\n\r\n</LinearLayout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/activity_location_register.xml b/app/src/main/res/layout/activity_location_register.xml
---- a/app/src/main/res/layout/activity_location_register.xml	(revision 2dca4c0f18e37d197bdb8b2e8f8d90100786ddb7)
-+++ b/app/src/main/res/layout/activity_location_register.xml	(date 1679895464870)
-@@ -5,11 +5,13 @@
-     xmlns:tools="http://schemas.android.com/tools"
-     android:layout_width="match_parent"
-     android:layout_height="match_parent"
--    tools:context=".LocationRegisterActivity">
-+    tools:context=".LocationRegisterActivity"
-+    android:gravity="center">
- 
-     <com.google.android.gms.maps.MapView
-         android:id="@+id/mapView"
--        android:layout_width="match_parent"
--        android:layout_height="match_parent" />
-+        android:layout_width="300dp"
-+        android:layout_height="200dp"
-+        android:layout_gravity="center"/>
- 
- </LinearLayout>
-\ No newline at end of file
-Index: app/src/main/AndroidManifest.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.icontest2\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.QUERY_ALL_PACKAGES\"\r\n        tools:ignore=\"QueryAllPackagesPermission\" />\r\n\r\n    <queries>\r\n        <package android:name=\"com.vuforia.engine.coresamples\" />\r\n    </queries>\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n\r\n    <application\r\n        android:name=\".KakaoInit\"\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/food_truck\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/food_truck_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.IconTest2\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".CustomerLocationRegister\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".LocationRegisterActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MenuListsActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SignUpLocationActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MyPageActivity\"\r\n            android:exported=\"false\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"@string/google_maps_key\" />\r\n\r\n        <activity\r\n            android:name=\".MapActivity\"\r\n            android:exported=\"true\" />\r\n        <activity\r\n            android:name=\".SearchActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SignUpActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".LoginActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".SplashActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity> <!-- Kakao 로그인 -->\r\n        <activity\r\n            android:name=\"com.kakao.sdk.auth.AuthCodeHandlerActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.VIEW\" />\r\n\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n                <category android:name=\"android.intent.category.BROWSABLE\" />\r\n\r\n                <!-- Redirect URI: \"kakao{NATIVE_APP_KEY}://oauth\" -->\r\n                <!-- scheme-example: \"kakao{NATIVE_APP_KEY}\" -->\r\n                <data\r\n                    android:host=\"oauth\"\r\n                    android:scheme=\"@string/kakao_native_key_manifest\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
---- a/app/src/main/AndroidManifest.xml	(revision 2dca4c0f18e37d197bdb8b2e8f8d90100786ddb7)
-+++ b/app/src/main/AndroidManifest.xml	(date 1679895464880)
-@@ -14,10 +14,6 @@
-         <package android:name="com.vuforia.engine.coresamples" />
-     </queries>
- 
--    <uses-permission android:name="android.permission.INTERNET" />
--    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
--    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
--
-     <application
-         android:name=".KakaoInit"
-         android:allowBackup="true"
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_4_13_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_4_13_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_4_13_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-27_오후_4_13_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,325 +0,0 @@
-Index: app/src/main/java/com/example/icontest2/SignUpActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.icontest2\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.InputFilter\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.widget.EditText\r\nimport com.example.icontest2.databinding.ActivitySignUpBinding\r\nimport java.util.regex.Pattern\r\nimport android.Manifest\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.location.Geocoder\r\nimport android.widget.Button\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport java.util.*\r\n\r\n\r\nclass SignUpActivity : AppCompatActivity(), OnMapReadyCallback {\r\n    private lateinit var binding: ActivitySignUpBinding\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var buttonLocation: Button\r\n    private val REQUEST_LOCATION_PERMISSION = 1\r\n    private var TAG = \"SignUpActivity\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?){\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivitySignUpBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        // 아이디, 비밀번호, 비밀번호 확인, 이름, 휴대폰번호의 editText id\r\n        val signUpBtn = binding.signUpBtn\r\n        val signUptextIdLengthChecker = binding.mainTextInputLayoutID\r\n        val signUptextPwLengthChecker = binding.mainTextInputLayoutPW\r\n        val lengthCheck = binding.mainTextInputLayoutCreateName\r\n        val signUPEdit_ID = binding.EditID // 아이디 만들기\r\n        val signUPEdit_PW = binding.EditPW // 비밀번호 만들기\r\n        val signUpCreate_name = binding.createName // 이름 만들기\r\n        val signUpCreate_phone_number = binding.phoneNumberCreate // 폰번호 숫자만 11자제한\r\n        setEditTextInput(signUpCreate_phone_number, 11)\r\n\r\n        signUpBtn.setOnClickListener {\r\n            var intent = Intent(this, LoginActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        buttonLocation = findViewById(R.id.button_location) // 사용자 위치 조회 및 입력\r\n        buttonLocation.setOnClickListener {\r\n            requestLocationPermission()\r\n            showUserLocation()\r\n        }\r\n        val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n\r\n        val buttonShowLocation = findViewById<Button>(R.id.button_location)\r\n        buttonShowLocation.setOnClickListener {\r\n            if (ContextCompat.checkSelfPermission(this,\r\n                    Manifest.permission.ACCESS_FINE_LOCATION)\r\n                == PackageManager.PERMISSION_GRANTED) {\r\n                // 위치 권한이 허용된 경우\r\n                showUserLocation()\r\n            } else {\r\n                // 위치 권한이 허용되지 않은 경우\r\n                ActivityCompat.requestPermissions(this,\r\n                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                    REQUEST_LOCATION_PERMISSION)\r\n            }\r\n        }\r\n\r\n        // 아이디, 패스워드 초과 경고 메세지\r\n        fun textLengthChecker() {\r\n            signUptextIdLengthChecker.isCounterEnabled = true\r\n            signUptextPwLengthChecker.isCounterEnabled = true\r\n            lengthCheck.isCounterEnabled = true\r\n\r\n            signUptextIdLengthChecker.counterMaxLength = 15 // ID 최대 길이\r\n            signUptextPwLengthChecker.counterMaxLength = 20 // PW 최대 길이\r\n            lengthCheck.counterMaxLength = 10\r\n\r\n            signUptextIdLengthChecker.isErrorEnabled = true\r\n            signUptextPwLengthChecker.isErrorEnabled = true\r\n            lengthCheck.isErrorEnabled = true\r\n\r\n            signUPEdit_ID.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun afterTextChanged(p0: Editable?) {\r\n                    if (signUPEdit_ID.length() > 15) {\r\n                        signUptextIdLengthChecker.error = \"ID의 글자 수를 초과하였습니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                    if (signUPEdit_ID.length() < 5) {\r\n                        signUptextIdLengthChecker.error = \"ID는 최소 5자 이상입니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n            signUPEdit_PW.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun afterTextChanged(p0: Editable?) {\r\n                    if (signUPEdit_PW.length() > 20) {\r\n                        signUptextPwLengthChecker.error = \"PW의 글자 수를 초과하였습니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                    if (signUPEdit_PW.length() < 8) {\r\n                        signUptextPwLengthChecker.error = \"PW는 최소 8자 이상입니다.\"\r\n                    } else {\r\n                        signUptextIdLengthChecker.error = null\r\n                    }\r\n                }\r\n            })\r\n            signUpCreate_name.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                }\r\n                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n                    if (signUpCreate_name.length() > 10) {\r\n                        lengthCheck.error = \"이름의 글자 수를 초과 하였습니다.\"\r\n                    } else {\r\n                        lengthCheck.error = null\r\n                    }\r\n                }\r\n                override fun afterTextChanged(p0: Editable?) {\r\n                }\r\n            })\r\n        }\r\n\r\n        notKorean(signUPEdit_ID) // id 한글 예외처리\r\n        notKorean(signUPEdit_PW) // pw 한글 예외처리\r\n        onlyKorean(signUpCreate_name) // 이름 입력시 한글만\r\n        checkwhite(signUpCreate_name) // 이름 입력시 공백 확인\r\n        textLengthChecker() // 문자길이 체크\r\n\r\n    }\r\n\r\n    // 한글예외처리 함수\r\n    fun notKorean(editText: EditText){\r\n        Log.d(TAG, \" - checkNotKorean\")\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n            }\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n            }\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val text = s.toString()\r\n                if (text.matches(Regex(\"[ㄱ-ㅎ가-힣]+\"))) {\r\n                    editText.error = \"한글은 입력할 수 없습니다.\"\r\n                } else {\r\n                    editText.error = null\r\n                }\r\n            }\r\n        })\r\n    }\r\n    // 한글만 입력함수\r\n    fun onlyKorean(editText: EditText){\r\n        Log.d(TAG, \" - checkNotKorean\")\r\n        val pattern = Pattern.compile(\"[^ㄱ-ㅎ가-힣]*$\") // 한글을 제외한 문자열 패턴\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val text = s.toString()\r\n                val matcher = pattern.matcher(text)\r\n                if (matcher.matches()) {\r\n                    editText.error = \"한글을 제외한 문자열은 입력할 수 없습니다.\"\r\n                } else {\r\n                    editText.error = null\r\n                }\r\n            }\r\n        })\r\n    }\r\n    // 공백체크함수\r\n    fun checkwhite(editText: EditText){\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            override fun afterTextChanged(s: Editable?) {\r\n                // EditText의 문자열 가져오기\r\n                val text = s.toString()\r\n                Log.d(TAG, \"${text} - checkWhiteSpace\")\r\n                // 결과 출력\r\n                if (text.contains(\" \")) {\r\n                    Log.d(TAG, \"${text} - 공백있음\")\r\n                    editText.error = \"공백이 포함되어 있습니다.\"\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n    // 폰번호 입력시 11자제한, 숫자만 입력\r\n    fun setEditTextInput(editText: EditText, maxLength: Int) {\r\n        val inputFilter = arrayOf<InputFilter>(InputFilter { source, _, _, _, _, _ ->\r\n            if (source.toString().matches(Regex(\"[0-9]+\"))) {\r\n                null // 숫자일 경우, null 리턴\r\n            } else {\r\n                \"\" // 숫자가 아닐 경우, 빈 문자열(\"\") 리턴\r\n            }\r\n        })\r\n        editText.filters = inputFilter\r\n        editText.addTextChangedListener(object : TextWatcher {\r\n            override fun afterTextChanged(s: Editable?) {\r\n                val input = s.toString()\r\n                if (input.length > maxLength) {\r\n                    editText.error = \"입력할 수 있는 숫자는 ${maxLength}자리 이하입니다.\"\r\n                } else {\r\n                    editText.error = null\r\n                }\r\n                val text = s.toString()\r\n                Log.d(TAG, \"${text} - checkWhiteSpace\")\r\n                // 결과 출력\r\n                if (text.contains(\" \")) {\r\n                    Log.d(TAG, \"${text} - 공백있음\")\r\n                    editText.error = \"공백이 포함되어 있습니다.\"\r\n                }\r\n\r\n\r\n            }\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n        })\r\n    }\r\n    // 사용자 위치 조회, 위치 입력\r\n    private fun showUserLocation() {\r\n        val editText = findViewById<EditText>(R.id.editText)\r\n        if (ContextCompat.checkSelfPermission(this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n            mMap.isMyLocationEnabled = true\r\n\r\n            // 사용자 위치 가져오기\r\n            val fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)\r\n            fusedLocationProviderClient.lastLocation.addOnSuccessListener { location ->\r\n                if (location != null) {\r\n                    val geocoder = Geocoder(this, Locale.KOREAN)\r\n                    val addresses = geocoder.getFromLocation(location.latitude, location.longitude, 1)\r\n                    if (addresses != null) {\r\n                        if (addresses.isNotEmpty()) {\r\n                            val address = addresses[0]\r\n                            val addressStr = address.getAddressLine(0)\r\n                            editText.setText(addressStr)\r\n                        }\r\n                    }\r\n\r\n\r\n                    val latLng = LatLng(location.latitude, location.longitude)\r\n                    mMap.addMarker(MarkerOptions().position(latLng).title(\"User Location\"))\r\n                    mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 15f))\r\n                }\r\n            }\r\n        }\r\n    }\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        mMap = googleMap\r\n        mMap.uiSettings.isZoomControlsEnabled = true\r\n    }\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == REQUEST_LOCATION_PERMISSION) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                showUserLocation()\r\n            }\r\n        }\r\n    }\r\n    private fun requestLocationPermission() {\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            showUserLocation()\r\n        } else {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                REQUEST_LOCATION_PERMISSION\r\n            )\r\n        }\r\n    }\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/icontest2/SignUpActivity.kt b/app/src/main/java/com/example/icontest2/SignUpActivity.kt
---- a/app/src/main/java/com/example/icontest2/SignUpActivity.kt	(revision 225d742c0fbf6a64fb066cd6742ad190fb7a5e7d)
-+++ b/app/src/main/java/com/example/icontest2/SignUpActivity.kt	(date 1679901168387)
-@@ -1,5 +1,6 @@
- package com.example.icontest2
- 
-+import android.content.Intent
- import androidx.appcompat.app.AppCompatActivity
- import android.os.Bundle
- import android.text.Editable
-@@ -10,10 +11,10 @@
- import com.example.icontest2.databinding.ActivitySignUpBinding
- import java.util.regex.Pattern
- import android.Manifest
--import android.content.Intent
- import android.content.pm.PackageManager
- import android.location.Geocoder
- import android.widget.Button
-+import android.widget.Toast
- import androidx.core.app.ActivityCompat
- import androidx.core.content.ContextCompat
- import com.google.android.gms.location.LocationServices
-@@ -28,18 +29,27 @@
- 
- class SignUpActivity : AppCompatActivity(), OnMapReadyCallback {
-     private lateinit var binding: ActivitySignUpBinding
-+    private var TAG = "SignUpActivity"
-     private lateinit var mMap: GoogleMap
-     private lateinit var buttonLocation: Button
-     private val REQUEST_LOCATION_PERMISSION = 1
--    private var TAG = "SignUpActivity"
-+
-+
- 
-     override fun onCreate(savedInstanceState: Bundle?){
-         super.onCreate(savedInstanceState)
-         binding = ActivitySignUpBinding.inflate(layoutInflater)
-         setContentView(binding.root)
- 
-+        val returnIntent = Intent(this, LoginActivity::class.java)
-+        val locationRegisterIntent = Intent(this, LocationRegisterActivity::class.java)
-+
-         // 아이디, 비밀번호, 비밀번호 확인, 이름, 휴대폰번호의 editText id
--        val signUpBtn = binding.signUpBtn
-+        val signUpIdEdit = binding.signUpIdEdit // 아이디
-+        val signUpPasswdEdit = binding.signUpPasswdEdit
-+        val signUpCheckPasswdEdit = binding.signUpCheckPasswdEdit
-+        val signUpNameEdit = binding.signUpNameEdit
-+        val signUpPhoneEdit = binding.signUpPhoneEdit
-         val signUptextIdLengthChecker = binding.mainTextInputLayoutID
-         val signUptextPwLengthChecker = binding.mainTextInputLayoutPW
-         val lengthCheck = binding.mainTextInputLayoutCreateName
-@@ -49,17 +59,13 @@
-         val signUpCreate_phone_number = binding.phoneNumberCreate // 폰번호 숫자만 11자제한
-         setEditTextInput(signUpCreate_phone_number, 11)
- 
--        signUpBtn.setOnClickListener {
--            var intent = Intent(this, LoginActivity::class.java)
--            startActivity(intent)
--        }
--
-         buttonLocation = findViewById(R.id.button_location) // 사용자 위치 조회 및 입력
-         buttonLocation.setOnClickListener {
-             requestLocationPermission()
-             showUserLocation()
-         }
--        val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment
-+        val mapFragment =
-+            supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment
-         mapFragment.getMapAsync(this)
- 
-         val buttonShowLocation = findViewById<Button>(R.id.button_location)
-@@ -77,6 +83,8 @@
-             }
-         }
- 
-+
-+
-         // 아이디, 패스워드 초과 경고 메세지
-         fun textLengthChecker() {
-             signUptextIdLengthChecker.isCounterEnabled = true
-@@ -95,8 +103,6 @@
-                 override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                 }
-                 override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
--                }
--                override fun afterTextChanged(p0: Editable?) {
-                     if (signUPEdit_ID.length() > 15) {
-                         signUptextIdLengthChecker.error = "ID의 글자 수를 초과하였습니다."
-                     } else {
-@@ -108,6 +114,8 @@
-                         signUptextIdLengthChecker.error = null
-                     }
-                 }
-+                override fun afterTextChanged(p0: Editable?) {
-+                }
- 
-             })
- 
-@@ -115,8 +123,6 @@
-                 override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-                 }
-                 override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
--                }
--                override fun afterTextChanged(p0: Editable?) {
-                     if (signUPEdit_PW.length() > 20) {
-                         signUptextPwLengthChecker.error = "PW의 글자 수를 초과하였습니다."
-                     } else {
-@@ -128,6 +134,8 @@
-                         signUptextIdLengthChecker.error = null
-                     }
-                 }
-+                override fun afterTextChanged(p0: Editable?) {
-+                }
-             })
-             signUpCreate_name.addTextChangedListener(object : TextWatcher {
-                 override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
-@@ -144,14 +152,176 @@
-             })
-         }
- 
-+        val textWatcher = object : TextWatcher {
-+            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
-+            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
-+            // 사용자의 입력이 끝난 후 처리
-+            override fun afterTextChanged(s: Editable?) {
-+                Log.d(TAG, "${s}")
-+                // 아이디
-+                if (s == signUpIdEdit.editableText) {
-+                    Log.d(TAG, "in - id - length")
-+                    val minLength = 5
-+                    val maxLength = 15
-+                    checkWhiteSpace(s, signUpIdEdit) // 공백 문자 확인
-+                    checkSpecialCharacters(s, signUpIdEdit) // 특수 문자 확인
-+                    checkLength(s, signUpIdEdit, maxLength, minLength) // 문자열 길이 확인
-+                }
-+                // 비밀번호
-+                if (s == signUpPasswdEdit.editableText) {
-+                    Log.d(TAG, "in - pw - length")
-+                    val minLength = 8
-+                    val maxLength = 20
-+                    checkWhiteSpace(s, signUpPasswdEdit) // 공백 문자 확인
-+                    checkSpecialCharacters(s, signUpPasswdEdit) // 특수 문자 확인
-+                    checkAlphaNumber(signUpPasswdEdit) // 영문 + 숫자 확인
-+                    checkLength(s, signUpPasswdEdit, maxLength, minLength) // 문자열 길이 확인
-+                }
-+                // 비밀번호 체크
-+                if (s == signUpCheckPasswdEdit.editableText) {
-+                    Log.d(TAG, "in - pwcheck - length")
-+                    if (signUpPasswdEdit.text.toString() != signUpCheckPasswdEdit.text.toString()) {
-+                        signUpCheckPasswdEdit.error = "비밀번호가 일치하지 않습니다."
-+                    } else {
-+                        signUpCheckPasswdEdit.error = null
-+                    }
-+                }
-+                // 이름
-+                if (s == signUpNameEdit.editableText) {
-+                    Log.d(TAG, "in - name - length")
-+                    val minLength = 1
-+                    val maxLength = 10
-+                    checkWhiteSpace(s, signUpNameEdit) // 공백 문자 확인
-+                    checkSpecialCharacters(s, signUpNameEdit) // 특수 문자 확인
-+                    checkKorean(signUpNameEdit) // 한글 확인
-+                    checkLength(s, signUpNameEdit, maxLength, minLength) // 문자열 길이 확인
-+                }
-+                // 휴대폰번호
-+                if (s == signUpPhoneEdit.editableText) {
-+                    Log.d(TAG, "in - phone - length")
-+                    checkWhiteSpace(s, signUpPhoneEdit) // 공백 문자 확인
-+                    checkSpecialCharacters(s, signUpPhoneEdit) // 특수 문자 확인
-+                    checkPhoneNumber(signUpPhoneEdit) // 숫자 및 11자 확인
-+                }
-+            }
-+        }
-+
-+        // 각 항목별 공백, 특수 문자 처리
-+        signUpIdEdit.addTextChangedListener(textWatcher)
-+        signUpPasswdEdit.addTextChangedListener(textWatcher)
-+        signUpCheckPasswdEdit.addTextChangedListener(textWatcher)
-+        signUpNameEdit.addTextChangedListener(textWatcher)
-+        signUpPhoneEdit.addTextChangedListener(textWatcher)
-         notKorean(signUPEdit_ID) // id 한글 예외처리
-         notKorean(signUPEdit_PW) // pw 한글 예외처리
-         onlyKorean(signUpCreate_name) // 이름 입력시 한글만
-         checkwhite(signUpCreate_name) // 이름 입력시 공백 확인
-         textLengthChecker() // 문자길이 체크
- 
--    }
-+        binding.signUpBtn.setOnClickListener {
-+
-+            returnIntent.putExtra("name", binding.signUpNameEdit.text.toString())
-+            startActivity(returnIntent)
-+            finish()
-+        }
- 
-+        binding.signUpLocationBtn.setOnClickListener {
-+            startActivity(locationRegisterIntent)
-+        }
-+
-+    }
-+    // 공백 문자 확인 함수
-+    fun checkWhiteSpace(editable: Editable?, editText: EditText) {
-+        // EditText의 문자열 가져오기
-+        val text = editable.toString()
-+        Log.d(TAG, "${text} - checkWhiteSpace")
-+        // 결과 출력
-+        if (text.contains(" ")) {
-+            Log.d(TAG, "${text} - 공백있음")
-+            editText.error = "공백이 포함되어 있습니다."
-+        }
-+    }
-+
-+    // 특수 문자 확인 함수
-+    fun checkSpecialCharacters(editable: Editable?, editText: EditText) {
-+        // EditText의 문자열 가져오기
-+        val text = editable.toString()
-+        Log.d(TAG, "${text} - checkSpecialCharacters")
-+
-+        // 검사할 특수 문자 지정
-+        val specialCharacters = "!@#$%^&*()_-+=|\\{}[]:;\"'<>,.?/~`"
-+
-+        // 결과 출력
-+        if (text.matches(".*[!@#\$%^&*(),.?\":{}|<>\\[\\]~-].*".toRegex())) {
-+            editText.error = "특수문자는 입력할 수 없습니다."
-+        }
-+
-+    }
-+
-+    // 문자 길이 확인 함수
-+    fun checkLength(editable: Editable?, editText: EditText, maxLength: Int, minLength: Int) {
-+        // EditText의 문자열 가져오기
-+        val text = editable.toString()
-+        Log.d(TAG, "${text} - checkLength")
-+
-+        val length = text.length
-+
-+        if (length < minLength) {
-+            editText.error = "최소 ${minLength}자 이상 입력하세요"
-+        } else if (length > maxLength) {
-+            editText.error = "최대 ${maxLength}자까지 입력 가능합니다"
-+        }
-+
-+    }
-+
-+    // 영문 + 숫자 확인 함수
-+    fun checkAlphaNumber(editText: EditText) {
-+        Log.d(TAG, " - checkAlphaNumber")
-+
-+        val alphaNumbericRegex = Regex("[a-zA-Z0-9]+")
-+        val inputFilter = InputFilter { source, start, end, dest, dstart, dend ->
-+            val input = dest.subSequence(0, dstart).toString() + source.subSequence(
-+                start,
-+                end
-+            ) + dest.subSequence(dend, dest.length).toString()
-+            return@InputFilter if (input.matches(alphaNumbericRegex)) null else ""
-+        }
-+        editText.filters = arrayOf(inputFilter)
-+
-+    }
-+
-+    // 한국어 확인 함수
-+    fun checkKorean(editText: EditText) {
-+        Log.d(TAG, " - checkKorean")
-+
-+        val inputFilter = InputFilter { source, _, _, _, _, _ ->
-+            val regex = Regex("[ㄱ-ㅎ가-힣]+")
-+            if (source.toString().matches(regex)) {
-+                source
-+            } else {
-+                ""
-+            }
-+        }
-+        editText.filters = arrayOf(inputFilter)
-+    }
-+
-+    // 숫자 + 11글자 확인 함수
-+    fun checkPhoneNumber(editText: EditText): Boolean {
-+        Log.d(TAG, " - checkPhoneNumber")
-+
-+        val regex = Regex("[0-9]+")
-+        val isNumeric = editText.text.toString().matches(regex)
-+        val isElevenDigits = editText.text.toString().length == 11
-+        // 숫자로만 이루어졌는지 확인
-+        if (!isNumeric) {
-+            editText.error = "숫자만 입력해주십시오."
-+        }
-+        // 11글자인지 확인
-+        if (!isElevenDigits) {
-+            editText.error = "11자리를 입력해주십시오."
-+        }
-+        return isNumeric && isElevenDigits
-+    }
-     // 한글예외처리 함수
-     fun notKorean(editText: EditText){
-         Log.d(TAG, " - checkNotKorean")
-@@ -299,4 +469,20 @@
-         }
-     }
- 
--}
-\ No newline at end of file
-+}
-+
-+
-+
-+
-+
-+
-+
-+
-+
-+
-+
-+
-+
-+
-+
-+
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-26_오전_12_18_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-03-26_오전_12_18_[Changes]/shelved.patch
deleted file mode 100644
